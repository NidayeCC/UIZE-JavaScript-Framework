/*
	UIZE JAVASCRIPT FRAMEWORK 2012-08-18

	http://www.uize.com/reference/Uize.Test.Uize.Data.html
	Available under MIT License or GNU General Public License -- http://www.uize.com/license.html
*/
Uize.module({name:'Uize.Test.Uize.Data',required:['Uize.Test','Uize.Class','Uize.Class.Value'],builder:function(){var c_a={aString:'blah',anArray:[1,2,3]},c_b={aString:'blah',anArray:[1,2,3]};function c_c(c_d,c_e,c_f,c_g,c_h,c_i,c_j){if(!c_h)c_h=[];if(c_i==null)c_i=0;if(c_j==null)c_j=1;var c_k,c_l;function c_m(c_n){var c_o=eval(c_d),c_p=c_h.concat();c_p[c_i]=c_k=c_f.concat();c_p[c_j]=c_n!==undefined?c_n:c_k;c_l=c_o[c_e].apply(c_o,c_p);}return Uize.Test.declare({title:'Test that the targetARRAYorBOOL parameter is handled correctly for various types of values',test:[{title:'Test that specifying the value false for the optional targetARRAYorBOOL parameter is handled correctly',test:function(){c_m(false);return(this.expect(true,c_k==c_l)&&this.expect(c_g,c_l));}},{title:'Test that specifying the value true for the optional targetARRAYorBOOL parameter is handled correctly',test:function(){c_m(true);return(this.expect(false,c_k==c_l)&&this.expect(c_g,c_l));}},{
title:'Test that specifying an empty array for the optional targetARRAYorBOOL parameter is handled correctly',test:function(){c_m([]);return(this.expect(false,c_k==c_l)&&this.expect(c_g,c_l));}},{title:'Test that specifying an array that is already populated with more elements for the optional targetARRAYorBOOL parameter is handled correctly',test:function(){var c_q=['some','extra','crud'];c_m(c_f.concat(c_q));return(this.expect(false,c_k==c_l)&&this.expect(c_g.concat(c_q),c_l));}},{title:'Test that specifying an array that is already populated, but with the same number of elements, for the optional targetARRAYorBOOL parameter is handled correctly',test:function(){c_m(c_f.concat());return(this.expect(false,c_k==c_l)&&this.expect(c_g,c_l));}},{title:'Test that specifying the source array for the optional targetARRAYorBOOL parameter is handled correctly',test:function(){c_m();return(this.expect(true,c_k==c_l)&&this.expect(c_g,c_l));}},{
title:'Test that specifying an empty object for the optional targetARRAYorBOOL parameter is handled correctly',test:function(){c_m({});return(this.expect(false,c_k==c_l)&&this.expect(Uize.copyInto({},c_g),c_l));}},{title:'Test that specifying an object that already has some properties for the optional targetARRAYorBOOL parameter is handled correctly',test:function(){var c_q={some:1,extra:1,crud:1};c_m(Uize.copyInto({},c_q));return(this.expect(false,c_k==c_l)&&this.expect(Uize.copyInto({},c_q,c_g),c_l));}}]});}var c_r=Uize.Test.declare({title:'Test for Uize.Data Module',test:[Uize.Test.requiredModulesTest('Uize.Data'),Uize.Test.staticMethodsTest([['Uize.Data.identical',[['Test that calling with no parameters returns true',[],true],['Test that equality option defaults to strict',['1',1],false],['Test that two identical numbers are identical',[1,1],true],['Test that two identical booleans are identical',[true,true],true],['Test that two identical strings are identical',['foo','foo'],true],
['Test that null is identical to null',[null,null],true],['Test that NaN is identical to NaN',[NaN,NaN],true],['Test that undefined is identical to undefined',[undefined,undefined],true],['Test that two different numbers are not identical',[1,2],false],['Test that two different booleans are not identical',[true,false],false],['Test that two different strings are not identical',['foo','bar'],false],['Test that null is not identical to undefined',[null,undefined],false],['Test that NaN is not identical to 0',[NaN,0],false],['Test that two different Date object instances with the same value are identical',[new Date(2001,8,11),new Date(2001,8,11)],true],['Test that two different String object instances with the same value are identical',[new String('foo'),new String('foo')],true],['Test that two different Number object instances with the same value are identical',[new Number(1),new Number(1)],true],['Test that two different Boolean object instances with the same value are identical',
[new Boolean(false),new Boolean(false)],true],['Test that two different RegExp object instances with the same value are identical',[new RegExp('^foo$','gi'),new RegExp('^foo$','gi')],true],['Test that two different Date object instances with different values are not identical',[new Date(2001,8,11),new Date(2001,8,12)],false],['Test that two different String object instances with different values are not identical',[new String('foo'),new String('bar')],false],['Test that two different Number object instances with different values are not identical',[new Number(1),new Number(2)],false],['Test that two different Boolean object instances with different values are not identical',[new Boolean(false),new Boolean(true)],false],['Test that two different RegExp object instances with different values are not identical',[new RegExp('^foo$'),new RegExp('^bar$')],false],['Test that two different RegExp object instances that are only different in their options are not identical',
[new RegExp('^foo$','g'),new RegExp('^foo$','i')],false],['Test that a Date object instance is not identical to a Number object instance whose value is the Date instance\'s time in milliseconds',[new Date(2001,8,11),new Number(new Date(2001,8,11))],false],['Test that the number 1 and the string \'1\' are identical, according to loose equality',[1,'1',{equality:'loose'}],true],['Test that the number 1 and the boolean true are identical, according to loose equality',[1,true,{equality:'loose'}],true],['Test that the number 0 and the boolean false are identical, according to loose equality',[0,false,{equality:'loose'}],true],['Test that the number 0 and an empty string are identical, according to loose equality',[0,'',{equality:'loose'}],true],['Test that the boolean false and an empty string are identical, according to loose equality',[false,'',{equality:'loose'}],true],['Test that null and undefined are identical, according to loose equality',[null,undefined,{equality:'loose'}],true],
['Test that the number 1 and the string \'2\' are not identical, according to loose equality',[1,'2',{equality:'loose'}],false],['Test that the number 1 and the boolean false are not identical, according to loose equality',[1,false,{equality:'loose'}],false],['Test that the number 0 and the boolean true are not identical, according to loose equality',[0,true,{equality:'loose'}],false],['Test that the number 0 and a non-empty string are not identical, according to loose equality',[0,'blah',{equality:'loose'}],false],['Test that the boolean false and a non-empty string are not identical, according to loose equality',[false,'blah',{equality:'loose'}],false],['Test that null and the number 0 are not identical, according to loose equality',[null,0,{equality:'loose'}],false],['Test that the number 1 and the number 2 are not identical, according to loose equality',[1,2,{equality:'loose'}],false],['Test that the boolean false and the boolean true are not identical, according to loose equality',
[false,true,{equality:'loose'}],false],['Test that the string \'0\' and the string \'1\' are not identical, according to loose equality',['0','1',{equality:'loose'}],false],['Test that the string \'0\' and an empty string are not identical, according to loose equality',['0','',{equality:'loose'}],false],['Test that null and an empty object are not identical, according to loose equality',[null,{},{equality:'loose'}],false],['Test that the number 1 and the number 2 are identical, according to type equality',[1,2,{equality:'type'}],true],['Test that the number 1 and NaN are identical, according to type equality',[1,NaN,{equality:'type'}],true],['Test that the number 1 and the number Infinity are identical, according to type equality',[1,Infinity,{equality:'type'}],true],['Test that the boolean false and the boolean true are identical, according to type equality',[false,true,{equality:'type'}],true],['Test that the string \'0\' and the string \'1\' are identical, according to type equality',
['0','1',{equality:'type'}],true],['Test that the string \'0\' and an empty string are identical, according to type equality',['0','',{equality:'type'}],true],['Test that undefined is identical to undefined, according to type equality',[undefined,undefined,{equality:'type'}],true],['Test that null is identical to null, according to type equality',[null,null,{equality:'type'}],true],['Test that NaN is identical to NaN, according to type equality',[NaN,NaN,{equality:'type'}],true],['Test that the number 1 and the string \'1\' are not identical, according to type equality',[1,'1',{equality:'type'}],false],['Test that the number 1 and the boolean true are not identical, according to type equality',[1,true,{equality:'type'}],false],['Test that the number 0 and the boolean false are not identical, according to type equality',[0,false,{equality:'type'}],false],['Test that the number 0 and an empty string are not identical, according to type equality',[0,'',{equality:'type'}],false],
['Test that the number 0 and null are not identical, according to type equality',[0,null,{equality:'type'}],false],['Test that the number 0 and undefined are not identical, according to type equality',[0,undefined,{equality:'type'}],false],['Test that the boolean false and an empty string are not identical, according to type equality',[false,'',{equality:'type'}],false],['Test that null and undefined are not identical, according to type equality',[null,undefined,{equality:'type'}],false],['Test that null and an empty string are not identical, according to type equality',[null,'',{equality:'type'}],false],['Test that null and an empty object are not identical, according to type equality',[null,{},{equality:'type'}],false],['Test that undefined and an empty string are not identical, according to type equality',[undefined,'',{equality:'type'}],false],['Test that two empty arrays are identical',[[],[]],true],['Test that two empty objects are identical',[{},{}],true],
['Test that two identical arrays are identical',[[1,true,'blah',[],{},null,undefined],[1,true,'blah',[],{},null,undefined]],true],['Test that two identical objects are identical',[{prop1:1,prop2:true,prop3:'blah',prop4:[],prop5:{},prop6:null,prop7:undefined},{prop1:1,prop2:true,prop3:'blah',prop4:[],prop5:{},prop6:null,prop7:undefined}],true],['Test that two unpopulated arrays with same lengths are identical',[new Array(10),new Array(10)],true],{title:'Test workaround for issue in versions of Microsoft\'s JScript interpreter, where the for...in loop skips elements whose values are specified as undefined when an array is initialized using the array literal syntax',test:function(){var c_s=[undefined,undefined,undefined],c_t=[undefined,undefined,undefined];c_t[0]=undefined;return Uize.Data.identical(c_s,c_t);}},['Test that object is identical to itself',[c_a,c_a],true],['Test that two objects, with no shared object references, are identical',[c_a,c_b],true],
['Test that two unpopulated arrays with different lengths are not identical',[new Array(10),new Array(20)],false],['Test that two arrays with different elements are not identical',[[1,2],[1,2,3]],false],{title:'Test that two arrays with identical elements but different custom properties are not considered identical',test:function(){var c_s=[1,2,3,4,5],c_t=c_s.concat();c_s.foo='bar';c_t.hello='world';return!Uize.Data.identical(c_s,c_t);}},['Test that two objects with different properties are not identical',[{foo:1},{foo:1,bar:2}],false],{title:'Test that various combinations of different simple type values are considered tree identical',test:function(){var c_u=true;for(var c_v= -1,c_w=[-1,0,1,NaN,Infinity,false,true,'','foo','bar',null,undefined],c_x=c_w.length,c_y={equality:'tree'};c_u&& ++c_v<c_x;){for(var c_z=c_v-1;c_u&& ++c_z<c_x;)c_u=Uize.Data.identical(c_w[c_v],c_w[c_z],c_y);}return this.expect(true,c_u);}},['Test that two empty arrays are considered tree identical',[[],[],{equality:'tree'}],true],
['Test that two arrays with the same number of simple type elements are considered tree identical',[[-1,0,1,NaN,Infinity,false,true,'','foo',null,undefined],[-1,undefined,1,'',NaN,Infinity,false,0,null,true,'foo'],{equality:'tree'}],true],{title:'Test that two arrays with the same number of simple type elements, but where one array has a custom property that the other doesn\'t, are not considered tree identical',test:function(){var c_s=[0,1,2],c_t=[0,1,2];c_t.foo='bar';return this.expect(false,Uize.Data.identical(c_s,c_t,{equality:'tree'}));}},['Test that two arrays, each with a different number of simple type elements, are not considered tree identical',[[0,1,2],[0,1,2,3],{equality:'tree'}],false],['Test that two arrays with the same number of elements, where an element of one array is simple type and the corresponding element of the other array is an object, are not considered tree identical',[[0,1,2],[0,1,{}],{equality:'tree'}],false],
['Test that two arrays with the same number of elements, where an element of one array is simple type and the corresponding element of the other array is an array, are not considered tree identical',[[0,1,2],[0,1,[]],{equality:'tree'}],false],['Test that two empty objects are considered tree identical',[{},{},{equality:'tree'}],true],['Test that two objects with the same set of properties but with different simple type values are considered tree identical',[{p0:-1,p1:0,p2:1,p3:NaN,p4:Infinity,p5:false,p6:true,p7:'',p8:'foo',p9:null,p10:undefined},{p0:-1,p1:undefined,p2:1,p3:'',p4:NaN,p5:Infinity,p6:false,p7:0,p8:null,p9:true,p10:'foo'},{equality:'tree'}],true],['Test that two objects, each with a different set of properties, are not considered tree identical',[{foo:'bar'},{foo:'bar',hello:'world'},{equality:'tree'}],false],
['Test that two objects with the same set of properties, where the value of a property in one object is simple type and the value of that same property in the other object is an object, are not considered tree identical',[{p0:0,p1:1,p2:2},{p0:0,p1:1,p2:{}},{equality:'tree'}],false],['Test that two objects with the same set of properties, where the value of a property in one object is simple type and the value of that same property in the other object is an array, are not considered tree identical',[{p0:0,p1:1,p2:2},{p0:0,p1:1,p2:[]},{equality:'tree'}],false],['Test loose equality, with property value being a string in one object and a number in the other',[{foo:'1'},{foo:1},{equality:'loose'}],true],['Test strict equality, with property value being a string in one object and a number in the other',[{foo:'1'},{foo:1},{equality:'strict'}],false],['Test type equality, with property value being a string in both objects, but with different values',[{foo:'1'},{foo:'2'},{equality:'type'}],true],
['Test that NaN, Infinity, -Infinity, 5, and 1 are all type identical',[[NaN,Infinity,-Infinity,5],[1,1,1,1],{equality:'type'}],true]]],['Uize.Data.filter',[['Test that calling with no parameter produces an empty object',[],{}],['Test that calling with the value null specified for source object produces an empty object',[null],{}],['Test that calling with the value undefined specified for source object produces an empty object',[undefined],{}],['Test that calling with no propertyNames parameter produces an empty object',[{foo:1,bar:2,fooBar:3}],{}],['Test that calling with null specified for propertyNames parameter produces an empty object',[{foo:1,bar:2,fooBar:3},null],{}],['Test that calling with undefined specified for propertyNames parameter produces an empty object',[{foo:1,bar:2,fooBar:3},undefined],{}],['Test that calling with empty array specified for propertyNames parameter produces an empty object',[{foo:1,bar:2,fooBar:3},[]],{}],
['Test that calling with propertyNames array with no matching properties produces an empty object',[{foo:1,bar:2,fooBar:3},['hello','kitty']],{}],['Test that calling with propertyNames array with superset of properties produces source object',[{foo:1,bar:2,fooBar:3},['foo','bar','fooBar','hello','kitty']],{foo:1,bar:2,fooBar:3}],['Test that calling with propertyNames array with subset of properties produces subset source object',[{foo:1,bar:2,fooBar:3},['foo','bar','hello','kitty']],{foo:1,bar:2}],['Test that calling with empty source object produces empty object',[{},['foo','bar','hello','kitty']],{}],['Test that source object properties with values undefined, null, 0, NaN, or false are not missed',[{foo:undefined,bar:null,fooBar:0,hello:NaN,kitty:false},['foo','bar','fooBar','hello','kitty']],{foo:undefined,bar:null,fooBar:0,hello:NaN,kitty:false}],['Test that duplicate values in propertyNames array are ok',[{foo:1,bar:2,fooBar:3},['foo','foo','bar','bar']],{foo:1,bar:2}]]],['Uize.Data.findRecords',[
['Test that calling with no parameter produces an empty array',[],[]],['Test that calling with null for records array produces an empty array',[null,{type:'b'}],[]],['Test that calling with undefined for records array produces an empty array',[null,{type:'b'}],[]],['Test that calling with an empty records array produces an empty array',[[],{type:'b'}],[]],['Test that calling with a non-empty records array with no matching records produces an empty array',[[{foo:1,type:'a'},{bar:2,type:'c'}],{type:'b'}],[]],['Test that calling with a non-empty records array and no match specified produces source array',[[{foo:1},{bar:2}]],[{foo:1},{bar:2}]],['Test that calling with a non-empty records array and null for match produces source array',[[{foo:1},{bar:2}],null],[{foo:1},{bar:2}]],['Test that calling with a non-empty records array and undefined for match produces source array',[[{foo:1},{bar:2}],undefined],[{foo:1},{bar:2}]],
['Test that calling with a non-empty records array with matching records produces array with those matching records, in the correct order',[[{foo:1,type:'a'},{hello:3,type:'b'},{bar:2,type:'c'},{kitty:4,type:'b'}],{type:'b'}],[{hello:3,type:'b'},{kitty:4,type:'b'}]]]],['Uize.Data.getColumn',[['Get named column from an array of object records',[[{first:'John',last:'Wilkey'},{first:'Marie',last:'Stevenson'},{first:'Craig',last:'Pollack'}],'first'],['John','Marie','Craig']],['Get numbered column from an array of array records',[[['John','Wilkey'],['Marie','Stevenson'],['Craig','Pollack']],0],['John','Marie','Craig']],['Get column, using option to remove duplicate value',[[{firstName:'John',lastName:'Wilkey',department:'engineering'},{firstName:'Marie',lastName:'Stevenson',department:'finance'},{firstName:'Craig',lastName:'Pollack',department:'finance'},{firstName:'Nick',lastName:'Arendsen',department:'engineering'},{firstName:'Mark',lastName:'Strathley',department:'engineering'}],'department',true],
['engineering','finance']]]],['Uize.Data.isEmpty',[{title:'Test that this method is simply a reference to the Uize.keys method',test:function(){return this.expectSameAs(Uize.isEmpty,Uize.Data.isEmpty)}}]],['Uize.Data.emptyOut',[{title:'Test that this method is simply a reference to the Uize.emptyOut method',test:function(){return this.expectSameAs(Uize.emptyOut,Uize.Data.emptyOut)}}]],['Uize.Data.getKeys',[{title:'Test that this method is simply a reference to the Uize.keys method',test:function(){return this.expectSameAs(Uize.keys,Uize.Data.getKeys)}}]],['Uize.Data.getTotalKeys',[{title:'Test that this method is simply a reference to the Uize.totalKeys method',test:function(){return this.expectSameAs(Uize.totalKeys,Uize.Data.getTotalKeys)}}]],['Uize.Data.getValues',[{title:'Test that this method is simply a reference to the Uize.values method',test:function(){return this.expectSameAs(Uize.values,Uize.Data.getValues)}}]],['Uize.Data.getLookup',[{
title:'Test that this method is simply a reference to the Uize.lookup method',test:function(){return this.expectSameAs(Uize.lookup,Uize.Data.getLookup)}}]],['Uize.Data.getReverseLookup',[{title:'Test that this method is simply a reference to the Uize.reverseLookup method',test:function(){return this.expectSameAs(Uize.reverseLookup,Uize.Data.getReverseLookup)}}]],['Uize.Data.max',[{title:'Test that this method is simply a reference to the Uize.max method',test:function(){return this.expectSameAs(Uize.max,Uize.Data.max)}}]],['Uize.Data.min',[{title:'Test that this method is simply a reference to the Uize.min method',test:function(){return this.expectSameAs(Uize.min,Uize.Data.min)}}]],['Uize.Data.intersection',[['Test that calling with no parameters produces an empty object',[],{}],['Test that calling with null values produces an empty object',[null,null],{}],['Test that calling with undefined values produces an empty object',[undefined,undefined],{}],
['Test that calling with two empty objects produces an empty object',[{},{}],{}],['Test that calling with non-empty objects with no intersecting properties produces an empty object',[{foo:1,bar:2},{hello:1,kitty:2}],{}],['Test that calling with non-empty objects with intersecting properties produces object with the intersecting properties',[{foo:1,bar:2,fooBar:3,solarPower:4},{hello:1,kitty:2,fooBar:3,solarPower:4}],{fooBar:3,solarPower:4}],['Test that calling with non-empty objects with intersecting properties, but only one with matching values, produces object with only the completely matching intersecting property',[{foo:1,bar:2,fooBar:3,solarPower:4},{hello:1,kitty:2,fooBar:3,solarPower:5}],{fooBar:3}],['Test that values for intersecting properties must be a strict equality match in order to be considered intersecting',[{foo:1,bar:2,fooBar:true,hello:null,kitty:0},{foo:1,bar:'2',fooBar:1,hello:undefined,kitty:''}],{foo:1}],['Test that arrays can also be specified as source objects',
[['foo','bar',true,null],['hello','bar','kitty',null]],{1:'bar',3:null}]]],['Uize.Data.map',[['Test that function mapper gets element value as a parameter correctly',[function(c_A){return c_A.toUpperCase()},['a','b','c']],['A','B','C']],['Test that function mapper gets element key as a parameter correctly',[function(c_A,c_B){return c_B},['a','b','c']],[0,1,2]],['Test that function mapper is called as instance method on array correctly',[function(){return this.length},['a','b','c']],[3,3,3]],['Test that number can be specified in place of a source array',[function(c_A,c_B){return(c_B+1)+' of '+this.length+' = '+c_A},['a','b','c']],['1 of 3 = a','2 of 3 = b','3 of 3 = c']],['Test that a string can be used to specify a mapper',['(key + 1) + \' of \' + this.length + \' = \' + value',['a','b','c']],['1 of 3 = a','2 of 3 = b','3 of 3 = c']],['Test that a source object is automatically mapped to a object',['key + value',{a:0,b:1,c:2}],{a:'a0',b:'b1',c:'c2'}],['Test that an empty array maps to an empty array',
['value',[]],[]],['Test that an empty object maps to an empty object',['value',{}],{}],['Test that map can be used to convert an array to an object by specifying an empty object target',['value',['a','b','c'],{}],{0:'a',1:'b',2:'c'}],['Test that map can be used to convert an object to an array by specifying an empty array target',['value',{0:'a',1:'b',2:'c'},[]],['a','b','c']],['Test that an empty array maps to an empty object, when an empty object target is specified',['value',[],{}],{}],['Test that an empty object maps to an empty array, when an empty array target is specified',['value',{},[]],[]],c_c('Uize.Data','map',[1,2,3,4,5],[2,4,6,8,10],['value * 2',null,null],1,2)]],['Uize.Data.conjoined',[['Test that object is considered conjoined to itself',[c_a,c_a],true],['Test that two objects, with no shared object references, are not considered conjoined',[c_a,c_b],false],['Test that two objects that share some object reference are considered conjoined',[{foo:c_a},{bar:c_a}],true]]],['Uize.Data.clones',[
['Test that object is not considered a clone of itself',[c_a,c_a],false],['Test that two identical objects, with no shared object references, are considered clones',[c_a,c_b],true],['Test that two objects that are identical, but that share an object reference, are not considered clones',[{foo:1,bar:c_a},{foo:1,bar:c_a}],false]]]])]});c_r.arrayMethodTargetTest=c_c;return c_r;}});