/*
	UIZE JAVASCRIPT FRAMEWORK 2011-11-14

	http://www.uize.com/reference/Uize.Test.Uize.html
	Available under MIT License or GNU General Public License -- http://www.uize.com/license.html
*/
Uize.module({name:'Uize.Test.Uize',required:'Uize.Data',builder:function(){var _a={undefinedValue:undefined,nullValue:null,emptyString:'',nonEmptyString:'solar',numberValueZero:0,numberValueNegative:-1,numberValuePositive:1,numberValueNaN:NaN,numberValueInfinity:Infinity,numberValueNegativeInfinity:-Infinity,booleanFalse:false,booleanTrue:true},_b=[undefined,null,'','solar',0,-1,1,NaN,Infinity,-Infinity,false,true],_c={anObject:_a,anArray:_b},_d=[_a,_b],_e=[];_e[2]=1;_e[7]=2;var _f=Uize.subclass();_f.registerProperties({_g:'value'});function _h(_i){var _j=[];_j.push.apply(_j,_i);return _j;}function _k(_l,_m,_n){return{title:_l,test:function(){var _o=new _m(_n),_p=Uize.clone(_o);return(this.expect(true,_p!=_o)&&this.expectSameAs(_o.constructor,_p.constructor)&&this.expect(_o.valueOf(),_p.valueOf()));}};}function _q(_l,_r){function _s(){return _r?new Uize:Uize.subclass();}return{title:_l,test:[{title:'Test that firing an event for which no handler is registered has no ill effect',test:function(){
_s().fire('testEvent');return true;}},{title:'Test that firing an event for which a handler is registered works correctly',test:function(){var _t=false,_u=_s();_u.wire('testEvent',function(){_t=true});_u.fire('testEvent');return _t;}},{title:'Test that an event handler function receives a single object parameter, and that this event object contains a name property whose value matches the name of the fired event',test:function(){var _t=false,_u=_s();_u.wire('testEvent',function(_v){_t=arguments.length==1&&typeof _v=='object'&&_v&&_v.name=='testEvent';});_u.fire('testEvent');return _t;}},{title:'Test that the event object provided to an event handler has a source property, whose value is a reference to the object on which the event was fired',test:function(){var _t=false,_u=_s();_u.wire('testEvent',function(_v){_t=_v.source===_u});_u.fire('testEvent');return _t;}},{title:'Test that firing an event for which two handlers are registered results in the handlers being exucuted in the order registered',
test:function(){var _w=[],_u=_s();_u.wire('testEvent',function(){_w.push('handler1')});_u.wire('testEvent',function(){_w.push('handler2')});_u.fire('testEvent');return this.expect('handler1,handler2',_w+'');}},{title:'Test that firing an event for which more than two handlers are registered results in the handlers being exucuted in the order registered',test:function(){var _w=[],_u=_s();_u.wire('testEvent',function(){_w.push('handler1')});_u.wire('testEvent',function(){_w.push('handler2')});_u.wire('testEvent',function(){_w.push('handler3')});_u.wire('testEvent',function(){_w.push('handler4')});_u.fire('testEvent');return this.expect('handler1,handler2,handler3,handler4',_w+'');}},{title:'Test that firing an event using the alternate event object form is handled correctly',test:function(){var _t=false,_u=_s();_u.wire('testEvent',function(){_t=true});_u.fire({name:'testEvent'});return _t;}},{title:
'Test that extra event object properties that are specified when firing an event are accessible on the event object in the handler',test:function(){var _t=false,_u=_s();_u.wire('testEvent',function(_v){_t=_v.foo=='bar'&&_v.hello=='world'});_u.fire({name:'testEvent',foo:'bar',hello:'world'});return _t;}},{title:'Test that the same event object is passed to all handlers for an event and is also returned as the result of the fire method',test:function(){var _u=_s(),_x,_y;_u.wire('testEvent',function(_v){_x=_v;_v.foo='bar';});_u.wire('testEvent',function(_v){_y=_v;_v.hello='world';});var _v=_u.fire('testEvent');return(_v==_x&&_v==_y&&_v.foo=='bar'&&_v.hello=='world');}},{title:'Test that unwiring an event handler results in that handler no longer being executed',test:function(){var _t=false,_u=_s();function _z(){_t= !_t}_u.wire('testEvent',_z);_u.fire('testEvent');_u.unwire('testEvent',_z);_u.fire('testEvent');return _t;}},{title:
'Test that the special wildcard event name results in the handler being executed for all events, and that it can be unwired successfully',test:function(){var _A='testEvent1,testEvent2,testEvent3',_B=[],_C=[],_D=[],_u=_s();function _E(_v){_B.push(_v.name)}function _F(_v){_C.push(_v.name)}function _G(_v){_D.push(_v.name)}_u.wire('*',_E);_u.wire('*',_F);_u.wire('*',_G);_u.fire('testEvent1');_u.fire('testEvent2');_u.fire('testEvent3');_u.unwire('*',_E);_u.unwire('*',_F);_u.unwire('*',_G);_u.fire('testEvent1');_u.fire('testEvent2');_u.fire('testEvent3');return(_B+''==_A&&_C+''==_A&&_D+''==_A);}},{title:'Test that when the second of three event handlers is unwired, the execution order of the remaining two handlers is preserved',test:function(){var _w=[],_u=_s();_u.wire('testEvent',function(){_w.push('handler1')});function _F(){_w.push('handler2')}_u.wire('testEvent',_F);_u.wire('testEvent',function(){_w.push('handler3')});_u.unwire('testEvent',_F);_u.fire('testEvent');return this.expect('handler1,handler3',_w+'');}
},{title:'Test that wiring handlers for multiple different events using the event-names-to-handlers map is handled correctly',test:function(){var _H,_I,_J,_u=_s();_u.wire({testEvent1:function(){_H=true},testEvent2:function(){_I=true},testEvent3:function(){_J=true}});_u.fire('testEvent1');_u.fire('testEvent2');_u.fire('testEvent3');return _H&&_I&&_J;}},{title:'Test that unwiring handlers for multiple different events using the event-names-to-handlers map is handled correctly',test:function(){var _K=false,_L=false,_M=false,_u=_s();function _N(){_u.fire('testEvent1');_u.fire('testEvent2');_u.fire('testEvent3');}var _O={testEvent1:function(){_K= !_K},testEvent2:function(){_L= !_L},testEvent3:function(){_M= !_M}};_u.wire(_O);_N();_u.unwire(_O);_N();return _K&&_L&&_M;}},{title:'Test that not specifying a handler when unwiring an event results in all handlers for that event being unwired',test:function(){var _P=false,_Q=false,_R=false,_u=_s();_u.wire('testEvent',function(){_P= !_P});
_u.wire('testEvent',function(){_Q= !_Q});_u.wire('testEvent',function(){_R= !_R});_u.fire('testEvent');_u.unwire('testEvent');_u.fire('testEvent');return _P&&_Q&&_R;}},{title:'Test that unwiring a handler for the special wildcard event results in just that handler being unwired, rather than all handlers for the wildcard event or all handlers for all events',test:function(){var _w=[],_u=_s();function _E(){_w.push('handler1')}_u.wire('*',_E);_u.wire('*',function(){_w.push('handler2')});_u.wire('testEvent',function(){_w.push('handler3')});_u.fire('testEvent');_u.unwire('*',_E);_u.fire('testEvent');return this.expect('handler1,handler2,handler3,handler2,handler3',_w+'');}},_r?{title:'Test that event bubbling works correctly for instances',test:[{title:'Test that setting the bubble event property to true when firing an event on an instance with no parent is not fatal and results in a handler wired for that event being executed',test:function(){var _u=_s(),_t=false;_u.wire('testEvent',function(){_t=true});
_u.fire({name:'testEvent',bubble:true});return _t;}},{title:'Test that setting the bubble event property to true when firing an event on an instance with a parent causes that event to fire first on the instance and then on its parent',test:function(){var _w=[],_u=_s(),_S=_s();_u.parent=_S;_u.wire('testEvent',function(){_w.push('sourceHandler')});_S.wire('testEvent',function(){_w.push('sourceParentHandler')});_u.fire({name:'testEvent',bubble:true});return this.expect('sourceHandler,sourceParentHandler',_w+'');}},{title:'Test that a bubbling event is fired on all instances up the parent chain',test:function(){var _w=[],_u=_s(),_S=_s(),_T=_s(),_A=['sourceHandler','sourceParentHandler','sourceParentParentHandler'];_u.parent=_S;_S.parent=_T;_u.wire('testEvent',function(){_w.push(_A[0])});_S.wire('testEvent',function(){_w.push(_A[1])});_T.wire('testEvent',function(){_w.push(_A[2])});_u.fire({name:'testEvent',bubble:true});return this.expect(_A+'',_w+'');}},{title:
'Test that the event object provided to all handlers of a bubbling event up the parent chain is the same event object',test:function(){var _u=_s(),_S=_s(),_T=_s(),_U,_V,_W,_X={name:'testEvent',bubble:true};_u.parent=_S;_S.parent=_T;_u.wire('testEvent',function(_v){_U=_v;_v.foo='bar';});_S.wire('testEvent',function(_v){_V=_v;_v.hello='world';});_T.wire('testEvent',function(_v){_W=_v;_v.duck='typing';});var _v=_u.fire(_X);return(_v==_X&&_U==_X&&_V==_X&&_W==_X&&_v.foo=='bar'&&_v.hello=='world'&&_v.duck=='typing');}},{title:'Test that a bubbling event can be canceled by a handler of the bubbled event, so that it will not be fired on a higher parent',test:function(){var _w=[],_u=_s(),_S=_s(),_T=_s();_u.parent=_S;_S.parent=_T;_u.wire('testEvent',function(){_w.push('sourceHandler')});_S.wire('testEvent',function(_v){_w.push('sourceParentHandler');_v.bubble=false;});_T.wire('testEvent',function(){_w.push('sourceParentParentHandler')});_u.fire({name:'testEvent',bubble:true});
return this.expect('sourceHandler,sourceParentHandler',_w+'');}},{title:'Test that the event object for a bubbling event always has the instance on which the event was originally fired as the value for the source property',test:function(){var _u=_s(),_S=_s(),_T=_s(),_Y,_Z,_0;_u.parent=_S;_S.parent=_T;_u.wire('testEvent',function(_v){_Y=_v.source});_S.wire('testEvent',function(_v){_Z=_v.source});_T.wire('testEvent',function(_v){_0=_v.source});_u.fire({name:'testEvent',bubble:true});return(_Y==_u&&_Z==_u&&_0==_u);}}]}:{title:'Test that event bubbling is ignored for classes',test:[{title:'Test that setting the bubble event property to true when firing an event on a class with no parent (as it should be) is not fatal and results in a handler wired for that event being executed',test:function(){var _u=_s(),_t=false;_u.wire('testEvent',function(){_t=true});_u.fire({name:'testEvent',bubble:true});return _t;}},{title:
'Test that setting the bubble event property to true when firing an event on a class with a parent (which is not exactly valid) is not fatal and results in a handler wired for that event being executed',test:function(){var _w=[],_u=_s(),_S=_s();_u.parent=_S;_u.wire('testEvent',function(){_w.push('sourceHandler')});_S.wire('testEvent',function(){_w.push('sourceParentHandler')});_u.fire({name:'testEvent',bubble:true});return this.expect('sourceHandler',_w+'');}}]}]};}function _1(_l,_r){return{title:_l,test:[{title:'Test that values can be set for multiple properties by calling the set method with a single argument, which is an object containing an arbitrary number of property name to property value mappings',test:function(){var _2=Uize.subclass();_2.registerProperties({property1:{},property2:{},property3:{}});var _3=_r?new _2:_2;_3.set({property1:'property1Value',property2:'property2Value',property3:'property3Value'});return(this.expect('property1Value',_3.get('property1'))&&
this.expect('property2Value',_3.get('property2'))&&this.expect('property3Value',_3.get('property3')));}},{title:'Test that a value can be set for a single property by calling the set method with two arguments, where the first argument is the property\'s name and the second is the property\'s value',test:function(){var _2=Uize.subclass();_2.registerProperties({property1:{}});var _3=_r?new _2:_2;_3.set('property1','property1Value');return this.expect('property1Value',_3.get('property1'));}},{title:'Test that values can be set for multiple properties by calling the set method with more than two arguments, where the arguments are property name-value pairs',test:function(){var _2=Uize.subclass();_2.registerProperties({property1:{},property2:{},property3:{}});var _3=_r?new _2:_2;_3.set('property1','property1Value','property2','property2Value','property3','property3Value');return(this.expect('property1Value',_3.get('property1'))&&this.expect('property2Value',_3.get('property2'))&&
this.expect('property3Value',_3.get('property3')));}},{title:'Test that, when a private name for a set-get property is different from its publice name, the set method sets a value for a property using the private name of the set-get property and not its public name',test:function(){var _2=Uize.subclass();_2.registerProperties({_4:'property1'});var _3=_r?new _2:_2;_3.set('property1','property1Value');return(this.expect(undefined,_3.property1)&&this.expect('property1Value',_3._4));}},{title:'Test that, when a private name for a set-get property is different from its publice name, a value can be set for the property by specifying its private name when calling the set method',test:function(){var _2=Uize.subclass();_2.registerProperties({_4:'property1'});var _3=_r?new _2:_2;_3.set({_4:'property1Value'});return this.expect('property1Value',_3._4);}}]};}function _5(_l,_r){return{title:_l,test:[{title:
'Test that the value of a single set-get property can be obtained by calling the get method with a single string argument, specifying the name of the property',test:function(){var _2=Uize.subclass();_2.registerProperties({property1:{value:'property1Value'},property2:{value:'property2Value'}});var _3=_r?new _2:_2;return this.expect('property1Value',_3.get('property1'));}},{title:'Test that values can be obtained for multiple properties by calling the get method with a single argument, which is a list of property names',test:function(){var _2=Uize.subclass();_2.registerProperties({property1:{value:'property1Value'},property2:{value:'property2Value'},property3:{value:'property3Value'}});var _3=_r?new _2:_2;return this.expect({property1:'property1Value',property2:'property2Value',property3:'property3Value'},_3.get(['property1','property2','property3']));}},{title:'Test that values can be obtained for all properties by calling the get method with no arguments',test:function(){var _2=Uize.subclass();
_2.registerProperties({property1:{value:'property1Value'},property2:{value:'property2Value'},property3:{value:'property3Value'}});var _3=_r?new _2:_2;return this.expect({property1:'property1Value',property2:'property2Value',property3:'property3Value'},_3.get());}},{title:'Test that, when a private name for a set-get property is different from its publice name, the value can be obtained for the property by specifying its private name when calling the get method',test:function(){var _2=Uize.subclass(),_6={_4:'property1'};for(var _7 in _6);_2.registerProperties(_6);var _3=_r?new _2:_2;_3.set('property1','property1Value');return this.expect('property1Value',_3.get(_7));}},{title:'Test that, when a private name for a set-get property is different from its publice name and its value is set using its private name, the value can be obtained for the property by specifying its public name when calling the get method',test:function(){var _2=Uize.subclass();_2.registerProperties({_4:'property1'});var _3=_r?new _2:_2;
_3.set({_4:'property1Value'});return this.expect('property1Value',_3.get('property1'));}}]};}return Uize.Test.declare({title:'Test for Uize Base Class',test:[Uize.Test.staticMethodsTest([['Uize.capFirstChar',[['Many letters, first letter is lowercase','hello','Hello'],['Many letters, first letter is uppercase','Hello','Hello'],['Single letter, lowercase','h','H'],['Single letter, uppercase','H','H'],['Empty string','','']]],['Uize.constrain',[['Test that constraining a value that is lower than the lower limit returns the lower limit',[-20,-10,10],-10],['Test that constraining a value that is equal to the lower limit returns that value',[-10,-10,10],-10],['Test that constraining a value that is higher than the upper limit returns the upper limit',[20,-10,10],10],['Test that constraining a value that is equal to the upper limit returns that value',[10,-10,10],10],['Test that constraining value that is within the range simply returns that value',[1,-10,10],1],
['Test that, when the range is reversed, constraining a value that is lower than the lower limit returns the lower limit',[-20,10,-10],-10],['Test that, when the range is reversed, constraining a value that is equal to the lower limit returns that value',[-10,10,-10],-10],['Test that, when the range is reversed, constraining a value that is higher than the upper limit returns the upper limit',[20,10,-10],10],['Test that, when the range is reversed, constraining a value that is equal to the upper limit returns that value',[10,10,-10],10],['Test that, when the range is reversed, constraining value that is within the range simply returns that value',[1,10,-10],1],['Test that, when the lower limit and the upper limit are equal, constraining a value that is lower than the lower limit returns the lower limit',[5,10,10],10],['Test that, when the lower limit and the upper limit are equal, constraining a value that is higher than the upper limit returns the upper limit',[15,10,10],10]]],['Uize.inRange',[
['Test that a number that is lower than the lower bound of a range is not considered in range',[-50,100,0],false],['Test that a number that is at the lower bound of a range is considered in range',[0,100,0],true],['Test that a number that is between the lower and upper bounds of a range is considered in range',[50,100,0],true],['Test that a number that is at the upper bound of a range is considered in range',[100,100,0],true],['Test that a number that is higher than the upper bound of a range is not considered in range',[150,100,0],false],['Test that a date that falls before the lower bound of a date range is not considered in range',[new Date('01/01/1999'),new Date('01/01/2000'),new Date('01/01/2010')],false],['Test that a date that is at the lower bound of a date range is considered in range',[new Date('01/01/2000'),new Date('01/01/2000'),new Date('01/01/2010')],true],['Test that a date that is between the lower and upper bounds of a date range is considered in range',
[new Date('01/01/2005'),new Date('01/01/2000'),new Date('01/01/2010')],true],['Test that a date that is at the upper bound of a date range is considered in range',[new Date('01/01/2010'),new Date('01/01/2000'),new Date('01/01/2010')],true],['Test that a date that falls after the upper bound of a date range is not considered in range',[new Date('01/01/2011'),new Date('01/01/2000'),new Date('01/01/2010')],false],['Test that an object whose value is lower than the lower bound of a range is not considered in range',[new _f({value:-50}),new _f({value:0}),new _f({value:100})],false],['Test that an object whose value is at the lower bound of a range is considered in range',[new _f({value:0}),new _f({value:0}),new _f({value:100})],true],['Test that an object whose value is between the lower and upper bounds of a range is considered in range',[new _f({value:50}),new _f({value:0}),new _f({value:100})],true],['Test that an object whose value is at the upper bound of a range is considered in range',[new _f({value:100}),
new _f({value:0}),new _f({value:100})],true],['Test that an object whose value is higher than the upper bound of a range is not considered in range',[new _f({value:150}),new _f({value:0}),new _f({value:100})],false],['Test that a string that falls before the lower bound of a string range is not considered in range',['a','b','y'],false],['Test that a string that is at the lower bound of a string range is considered in range',['b','b','y'],true],['Test that a string that is between the lower and upper bounds of a string range is considered in range',['m','b','y'],true],['Test that a string that is at the upper bound of a string range is considered in range',['y','b','y'],true],['Test that a string that falls after the upper bound of a string range is not considered in range',['z','b','y'],false],['Test that, when the bounds of a range are reversed, a value that is lower than the lower bound of the range is not considered in range',[-50,100,0],false],
['Test that, when the bounds of a range are reversed, a value that is at the lower bound of the range is considered in range',[0,100,0],true],['Test that, when the bounds of a range are reversed, a value that is between the lower and upper bounds of the range is considered in range',[50,100,0],true],['Test that, when the bounds of a range are reversed, a value that is at the upper bound of the range is considered in range',[100,100,0],true],['Test that, when the bounds of a range are reversed, a value that is higher than the upper bound of the range is not considered in range',[150,100,0],false]]],['Uize.defaultNully',[['Test that the value null is defaulted',[null,'foo'],'foo'],['Test that the value undefined is defaulted',[undefined,'foo'],'foo'],['Test that the boolean value false is not defaulted',[false,'foo'],false],['Test that an empty string is not defaulted',['','foo'],''],['Test that the number value 0 is not defaulted',[0,'foo'],0],
['Test that the special value NaN is not defaulted',[NaN,'foo'],NaN],{title:'Test that an object type value is not defaulted',test:function(){var _8={};return this.expectSameAs(_8,Uize.defaultNully(_8,'foo'));}},{title:'Test that an array type value is not defaulted',test:function(){var _9=[];return this.expectSameAs(_9,Uize.defaultNully(_9,'foo'));}},{title:'Test that a function type value is not defaulted',test:function(){var _ba=function(){};return this.expectSameAs(_ba,Uize.defaultNully(_ba,'foo'));}}]],['Uize.isArray',[['Test that calling with no parameters returns false',[],false],['Test that the value undefined is not regarded as an array',undefined,false],['Test that the value null is not regarded as an array',null,false],['Test that a string type value is not regarded as an array','hello',false],['Test that a String object instance is not regarded as an array',new String('hello'),false],['Test that a number type value is not regarded as an array',5,false],
['Test that a Number object instance is not regarded as an array',new Number(5),false],['Test that a boolean type value is not regarded as an array',true,false],['Test that a Boolean object instance is not regarded as an array',new Boolean(true),false],['Test that an empty object is not regarded as an array',{},false],['Test that a function is not regarded as an array',function(){},false],['Test that a regular expression instance is not regarded as an array',/\d+/,false],['Test that an empty array is regarded as an array',[[]],true],['Test that an array with elements is regarded as an array',[[1,2,3,4]],true]]],['Uize.isNumber',[['Test that calling with no parameters returns false',[],false],['Test that the value undefined is not regarded as a number',undefined,false],['Test that the value null is not regarded as a number',null,false],['Test that a number format string type value is not regarded as a number','5',false],
['Test that a number format String object instance is not regarded as a number',new String('5'),false],['Test that a boolean type value is not regarded as a number',true,false],['Test that a Boolean object instance is not regarded as a number',new Boolean(true),false],['Test that an object is not regarded as a number',{},false],['Test that an array is not regarded as a number',[[]],false],['Test that a function is not regarded as a number',function(){},false],['Test that a regular expression instance is not regarded as a number',/\d+/,false],['Test that a number type value is regarded as a number',5,true],['Test that the special value Infinity is regarded as a number',Infinity,true],['Test that the special value -Infinity is regarded as a number',-Infinity,true],['Test that the special value NaN is not regarded as a number',NaN,false],['Test that a Number object instance is not regarded as a number',new Number(5),false]]],['Uize.isString',[['Test that calling with no parameters returns false',[],false],
['Test that the value undefined is not regarded as a string',undefined,false],['Test that the value null is not regarded as a string',null,false],['Test that a boolean type value is not regarded as a string',true,false],['Test that a Boolean object instance is not regarded as a string',new Boolean(true),false],['Test that an object is not regarded as a string',{},false],['Test that an array is not regarded as a string',[[]],false],['Test that a function is not regarded as a string',function(){},false],['Test that a regular expression instance is not regarded as a string',/\d+/,false],['Test that a non-empty string value is regarded as a string','foo',true],['Test that an empty string value is regarded as a string','',true],['Test that a String object instance is not regarded as a string',new String('foo'),false]]],['Uize.isBoolean',[['Test that calling with no parameters returns false',[],false],['Test that the value undefined is not regarded as a boolean',undefined,false],
['Test that the value null is not regarded as a boolean',null,false],['Test that a string value is not regarded as a boolean','foo',false],['Test that an object is not regarded as a boolean',{},false],['Test that an array is not regarded as a boolean',[[]],false],['Test that a function is not regarded as a boolean',function(){},false],['Test that a regular expression instance is not regarded as a boolean',/\d+/,false],['Test that the boolean value false is regarded as a boolean',false,true],['Test that the boolean value true is regarded as a boolean',true,true],['Test that a Boolean object instance is not regarded as a boolean',new Boolean(true),false]]],['Uize.isFunction',[['Test that calling with no parameters returns false',[],false],['Test that the value undefined is not regarded as a function',undefined,false],['Test that the value null is not regarded as a function',null,false],['Test that a string value is not regarded as a function','foo',false],
['Test that a boolean value is not regarded as a function',true,false],['Test that a number value is not regarded as a function',42,false],['Test that an object is not regarded as a function',{},false],['Test that an array is not regarded as a function',[[]],false],['Test that a regular expression instance is not regarded as a function',/\d+/,false],['Test that a function *is* regarded as a function',function(){},true]]],['Uize.isNully',[['Test that calling with no parameters returns true',[],true],['Test that the value undefined is regarded as being nully',undefined,true],['Test that the value null is regarded as being nully',null,true],['Test that a string value is not regarded as being nully','',false],['Test that a boolean value is not regarded as being nully',false,false],['Test that a number value is not regarded as being nully',0,false],['Test that the special value NaN is not regarded as being nully',NaN,false],['Test that an object is not regarded as being nully',{},false],
['Test that an array is not regarded as being nully',[[]],false],['Test that a function is not regarded as being nully',function(){},false],['Test that a regular expression instance is not regarded as being nully',/\d+/,false]]],['Uize.isObject',[['Test that calling with no parameters returns false',[],false],['Test that the value undefined is not regarded as being an object',undefined,false],['Test that the value null is not regarded as being an object',null,false],['Test that a string value is not regarded as being an object','foo',false],['Test that a boolean value is not regarded as being an object',true,false],['Test that a number value is not regarded as being an object',42,false],['Test that the special value NaN is not regarded as being an object',NaN,false],['Test that a function is not regarded as being an object',function(){},false],['Test that an object *is* regarded as being an object',{},true],['Test that an array is regarded as being an object',[[]],true],
['Test that a regular expression instance is regarded as being an object',/\d+/,true],['Test that a String object instance is regarded as being an object',new String(''),true],['Test that a Boolean object instance is regarded as being an object',new Boolean(false),true],['Test that a Number object instance is regarded as being an object',new Number(0),true]]],['Uize.isPlainObject',[['Test that calling with no parameters returns false',[],false],['Test that the value undefined is not regarded as being a plain object',undefined,false],['Test that the value null is not regarded as being a plain object',null,false],['Test that a string value is not regarded as being a plain object','foo',false],['Test that a boolean value is not regarded as being a plain object',true,false],['Test that a number value is not regarded as being a plain object',42,false],['Test that the special value NaN is not regarded as being a plain object',NaN,false],
['Test that a function is not regarded as being a plain object',function(){},false],['Test that a plain object *is* regarded as being a plain object',{},true],['Test that an array is not regarded as being a plain object',[[]],false],['Test that a regular expression instance is not regarded as being a plain object',/\d+/,false],['Test that a String object instance is not regarded as being a plain object',new String(''),false],['Test that a Boolean object instance is not regarded as being a plain object',new Boolean(false),false],['Test that a Number object instance is not regarded as being a plain object',new Number(0),false],['Test that a Uize class instance is not regarded as being a plain object',new Uize,false]]],['Uize.isPrimitive',[['Test that calling with no parameters returns false',[],false],['Test that the value undefined is not regarded as being an object',undefined,false],['Test that the value null is not regarded as being an object',null,false],
['Test that a string value is regarded as being a primitive','',true],['Test that a boolean value is regarded as being a primitive',false,true],['Test that a number value is regarded as being a primitive',0,true],['Test that the special value NaN is regarded as being a primitive',NaN,true],['Test that a function is not regarded as being a primitive',function(){},false],['Test that an object is not regarded as being a primitive',{},false],['Test that an array is not regarded as being a primitive',[[]],false],['Test that a regular expression instance is not regarded as being a primitive',/\d+/,false],['Test that a String object instance is not regarded as being a primitive',new String('foo'),false],['Test that a Boolean object instance is not regarded as being a primitive',new Boolean(true),false],['Test that a Number object instance is not regarded as being a primitive',new Number(42),false]]],['Uize.escapeRegExpLiteral',[['Test that all of the regular expression special characters are escaped correctly',
'^$|{}[]()?.*+\\','\\^\\$\\|\\{\\}\\[\\]\\(\\)\\?\\.\\*\\+\\\\'],['Test that characters that are not regular expression special characters are not escaped','foobar,:;\'"~`<>/!@#%&_-=','foobar,:;\'"~`<>/!@#%&_-=']]],['Uize.copyInto',[['Test that calling with only a target object and no source object results in the target object being returned unchanged',{foo:'bar',hello:'world'},{foo:'bar',hello:'world'}],['Test that specifying the value null for the source object results in the target object being returned unchanged',[{foo:'bar',hello:'world'},null],{foo:'bar',hello:'world'}],['Test that specifying the value undefined for the source object results in the target object being returned unchanged',[{foo:'bar',hello:'world'},undefined],{foo:'bar',hello:'world'}],['Test that copying a source object into a target object works correctly',[{foo:'foo',hello:'there',otherInTarget:'blah'},{foo:'bar',hello:'world',otherInSource:'yawn'}],{foo:'bar',hello:'world',otherInTarget:'blah',otherInSource:'yawn'}],{
title:'Test that the target object is returned and not a new object',test:function(){var _bb={foo:'bar'};var _j=Uize.copyInto(_bb,{hello:'world'});return this.expectSameAs(_bb,_j);}},['Test that an arbitrary number of source objects is supported',[{propFromTarget:'foo'},{propFromSource1:'bar'},{propFromSource2:'hello'},{propFromSource3:'world'}],{propFromTarget:'foo',propFromSource1:'bar',propFromSource2:'hello',propFromSource3:'world'}],['Test that the contents of source objects are copied into the target in the order in which the source objects are specified',[{foo:'foo',otherInTarget:'blah'},{foo:'bar',fancy:'pants'},{fancy:'schmancy',la:'dee dah'},{la:'dolce vita',fin:'ished'}],{foo:'bar',otherInTarget:'blah',fancy:'schmancy',la:'dolce vita',fin:'ished'}],['Test that specifying the value null or undefined for all of the source objects results in the target object being returned unchanged',[{foo:'bar',hello:'world'},null,undefined,undefined,null],{foo:'bar',hello:'world'}],
['Test that specifying the value null for the target object results in the value null being returned',[null,{foo:'bar',hello:'world'}],null],['Test that specifying the value undefined for the target object results in the value null being returned',[undefined,{foo:'bar',hello:'world'}],undefined]],null,{cloneArguments:true}],['Uize.pairUp',[['Test that calling with no parameters returns {undefined:undefined}',[],{undefined:undefined}],['Test that undefined is the default for the valueANYTYPE parameter',['key'],{key:undefined}],['Test that the key can be a string','key',{key:undefined}],['Test that the key can be a number',5,{5:undefined}],['Test that the key can be the special value Infinity',Infinity,{Infinity:undefined}],['Test that the key can be the special value NaN',NaN,{NaN:undefined}],['Test that the key can be a boolean',false,{'false':undefined}],['Test that the key can be undefined',undefined,{undefined:undefined}],['Test that the key can be null',null,{'null':undefined}],
['Test that the value can be a string',['key','value'],{key:'value'}],['Test that the value can be a number',['key',5],{key:5}],['Test that the value can be the special value Infinity',['key',Infinity],{key:Infinity}],['Test that the value can be the special value NaN',['key',NaN],{key:NaN}],['Test that the value can be a boolean',['key',false],{key:false}],['Test that the value can be undefined',['key',undefined],{key:undefined}],['Test that the value can be null',['key',null],{key:null}],['Test that the value can be an object',['key',{propName:'propValue'}],{key:{propName:'propValue'}}],['Test that an arbitrary number of arguments is supported',['string','foo','number',42,'boolean',false,'regexp',/\d+/,'undefined',undefined,'null',null,'NaN',NaN,'object',{},'array',[]],{'string':'foo','number':42,'boolean':false,'regexp':/\d+/,'undefined':undefined,'null':null,'NaN':NaN,'object':{},'array':[]}],
['Test that if there is only one argument whose value is an array, then that array is treated as the arguments list',[['string','foo','number',42,'boolean',false,'regexp',/\d+/,'undefined',undefined,'null',null,'NaN',NaN,'object',{},'array',[]]],{'string':'foo','number':42,'boolean':false,'regexp':/\d+/,'undefined':undefined,'null':null,'NaN':NaN,'object':{},'array':[]}]]],['Uize.substituteInto',[['Test that calling with no parameters produces an empty string',[],''],['Test that calling with just a source string simply produces that string','Hello, world!','Hello, world!'],['Test that specifying the value null for substitutions produces the source string',['Hello, world!',null,'[#KEY]'],'Hello, world!'],['Test that specifying the value undefined for substitutions produces the source string',['Hello, world!',undefined,'[#KEY]'],'Hello, world!'],['Test that substituting into an empty string produces an empty string',['',{name:'Eric'},'[#KEY]'],''],['Test that substitution of a single token works correctly',
['My name is [#name].',{name:'Eric'},'[#KEY]'],'My name is Eric.'],['Test that multiple substitutions are handled corretly',['My name is [#name], and I am a [#occupation].',{name:'Eric',occupation:'viking'},'[#KEY]'],'My name is Eric, and I am a viking.'],['Test that a custom token naming specifier is handled correctly',['My name is <%name%>, and I am a <%occupation%>.',{name:'Eric',occupation:'viking'},'<%KEY%>'],'My name is Eric, and I am a viking.'],['Test that token naming where token opener and closer are empty strings is handled correcly',['I am name, and I am a occupation.',{name:'Eric',occupation:'viking'},'KEY'],'I am Eric, and I am a viking.'],['Test that default for token naming is [#KEY]',['My name is [#name].',{name:'Eric'}],'My name is Eric.'],['Test that specifying an empty object for substitutions simply produces the source string',['Hello, world!',{}],'Hello, world!'],['Test that the same substitution can be used multiple times',
['My name is [#name]. [#name] is my name. You can call me [#name].',{name:'Eric'}],'My name is Eric. Eric is my name. You can call me Eric.'],['Test that substitution values that contain tokens are not further substituted into',['[#token1][#token2]',{token1:'[#token2]foo',token2:'bar'}],'[#token2]foobar'],['Test that tokens in the source string for which there aren\'t substitutions are left in the source string',['My name is [#name].',{occupation:'viking'}],'My name is [#name].'],['Test that substitutions for which there aren\'t tokens in the source string are ignored',['My name is [#name].',{name:'Eric',occupation:'viking'}],'My name is Eric.'],['Test that specifying an array for substitutions is handled correctly',['My name is [#0], and I am a [#1].',['Eric','viking']],'My name is Eric, and I am a viking.'],['Test that specifying an empty array for substitutions simply produces the source string',['Hello, world!',[]],'Hello, world!'],
['Test that non-string substitution values are correctly coerced to strings',['[#int] [#neg] [#float] [#nan] [#infinity] [#true] [#false] [#obj] [#null] [#undefined]',{int:5,neg:-5,float:5.5,nan:NaN,infinity:Infinity,'true':true,'false':false,obj:new _f({value:'OBJECT'}),'null':null,'undefined':undefined}],'5 -5 5.5 NaN Infinity true false OBJECT null undefined'],['Test that a string type substitution is treated as a substitutions array with one element',['My name is [#0].','Eric'],'My name is Eric.'],['Test that a number type substitution is treated as a substitutions array with one element',['Pi is approximately [#0].',3.14159265359],'Pi is approximately 3.14159265359.'],['Test that a boolean type substitution is treated as a substitutions array with one element',['It is not [#0] that the Earth is flat.',true],'It is not true that the Earth is flat.'],['Test that substitution keys are case-sensitive, as designed',['My name is [#name], and not [#NAME]!',{name:'Eric',NAME:'Derrick'}],
'My name is Eric, and not Derrick!'],['Test that substitution keys are space-sensitive, as designed',['My name is [#name], and not [# name ]!',{name:'Eric',' name ':'Derrick'}],'My name is Eric, and not Derrick!'],['Test that spaces in the token opener and token closer are significant, as designed',['[name] [ name] [name ] [ name ]',{name:'Eric'},'[ KEY ]'],'[name] [ name] [name ] Eric'],['Test that a token opener containing regular expression special characters is handled correctly',['My name is [^$|{}[]()?.*+\\name].',{name:'Eric'},'[^$|{}[]()?.*+\\KEY]'],'My name is Eric.'],['Test that a token closer containing regular expression special characters is handled correctly',['My name is [name^$|{}[]()?.*+\\].',{name:'Eric'},'[KEY^$|{}[]()?.*+\\]'],'My name is Eric.'],['Test that a substitution key containing regular expression special characters is handled correctly',['My name is [^$|{}[]()?.*+\\].',{'^$|{}[]()?.*+\\':'Eric'},'[KEY]'],'My name is Eric.'],
['Test that the source for substituting into can be a number',[3.14159265359,{'.':','},'KEY'],'3,14159265359'],['Test that the source for substituting into can be a boolean',[true,{ru:'Russia'},'KEY'],'tRussiae'],['Test that the source for substituting into can be an object that implements a value interface',[new _f({value:'My name is [#name].'}),{name:'Eric'}],'My name is Eric.'],['Test that the source for substituting into can be an array, whose elements will be concatenated',[['[#name]','[#occupation]'],{name:'Eric',occupation:'viking'}],'Eric,viking']]],['Uize.indexIn',[['Test that calling with no parameters produces the result -1',[],-1],['Test that specifying null for the sourceARRAY parameter produces the result -1',[null,null],-1],['Test that specifying undefined for the sourceARRAY parameter produces the result -1',[undefined,undefined],-1],['Test that specifying a number for the sourceARRAY parameter produces the result -1',[5,5],-1],
['Test that specifying a string for the sourceARRAY parameter produces the result -1',['hello','hello'],-1],['Test that specifying a boolean for the sourceARRAY parameter produces the result -1',[true,true],-1],['Test that specifying an empty array for the sourceARRAY parameter produces the result -1',[[],1],-1],['Test that the fromEndBOOL and strictEqualityBOOL parameters are observed correctly',[[0,1,'1','1',1,2],'1',true,false],4],['Test that the strictEqualityBOOL parameter is defaulted to true, as designed',[[0,1,'1','1',1,2],'1',true],3],['Test that the fromEndBOOL parameter is defaulted to false, as designed',[[0,1,'1','1',1,2],'1'],2],['Test that -1 is returned when the value is not found in the source array',[[0,1,'1','1',1,2],'0'],-1]]],['Uize.isIn',[['Test that calling with no parameters produces the result false',[],false],['Test that specifying null for the sourceARRAY parameter produces the result false',[null,null],false],
['Test that specifying undefined for the sourceARRAY parameter produces the result false',[undefined,undefined],false],['Test that specifying a number for the sourceARRAY parameter produces the result false',[5,5],false],['Test that specifying a string for the sourceARRAY parameter produces the result false',['hello','hello'],false],['Test that specifying a boolean for the sourceARRAY parameter produces the result false',[true,true],false],['Test that specifying an empty array for the sourceARRAY parameter produces the result false',[[],1],false],['Test that the value false for the strictEqualityBOOL parameter ia observed correctly',[[0,1],'1',false],true],['Test that the value true for the strictEqualityBOOL parameter ia observed correctly',[[0,1],'1',true],false],['Test that the strictEqualityBOOL parameter is defaulted to true, as designed',[[0,1],'1'],false],['Test that false is returned when the value is not found in the source array',[[0,1],2],false],
['Test that true is returned when the source is an object, and the value is the value of one of the source object\'s properties',[{foo:'bar',hello:'world'},'bar'],true],['Test that false is returned when the source is an object, and the value is not one of the object\'s propertes\' values',[{foo:'bar',hello:'world'},'blah'],false],['Test that the value false for the strictEqualityBOOL parameter ia observed correctly when the source is an object',[{prop1:0,prop2:1},'1',false],true],['Test that the value true for the strictEqualityBOOL parameter ia observed correctly when the source is an object',[{prop1:0,prop2:1},'1',true],false]]],['Uize.isEmpty',[['Test that empty object is considered empty',[{}],true],['Test that empty array is considered empty',[[]],true],['Test that empty string is considered empty',[''],true],['Test that String object initialized to empty string is considered empty',[new String('')],true],['Test that the number zero is considered empty',[0],true],
['Test that Number object initialized to zero is considered empty',[new Number(0)],true],['Test that the boolean false is considered empty',[false],true],['Test that Boolean object initialized to false is considered empty',[new Boolean(false)],true],['Test that null is considered empty',[null],true],['Test that undefined is considered empty',[undefined],true],['Test that NaN is considered empty',[NaN],true],['Test that class instance with empty value set-get property is considered empty',[new _f({value:0})],true],['Test that a non-empty object is not considered empty',[{blah:0}],false],['Test that a non-empty array is not considered empty',[['blah']],false],['Test that a non-empty string is not considered empty',['blah'],false],['Test that String object initialized to non-empty string is not considered empty',[new String('foo')],false],['Test that a non-zero number is not considered empty',[1],false],['Test that Number object initialized to non-zero number is not considered empty',[new Number(1)],false],
['Test that the boolean true is not considered empty',[true],false],['Test that Boolean object initialized to true is not considered empty',[new Boolean(true)],false],['Test that a function (even an empty one) is not considered empty',function(){},false],['Test that class instance with non-empty value set-get property is not considered empty',[new _f({value:1})],false]]],['Uize.emptyOut',[{title:'Test that emptying out an already empty array produces that same empty array as the result',test:function(){var _bc=[],_j=Uize.emptyOut(_bc);return this.expect(true,_bc==_j)&&this.expect(_bc,_j);}},{title:'Test that emptying out an already empty object produces that same empty object as the result',test:function(){var _bc={},_j=Uize.emptyOut(_bc);return this.expect(true,_bc==_j)&&this.expect(_bc,_j);}},{title:'Test that emptying out an array with contents produces that same array with no contents as the result',test:function(){var _bc=[1,2,3,4,5],_j=Uize.emptyOut(_bc);
return this.expect(true,_bc==_j)&&this.expect(_bc,[]);}},{title:'Test that emptying out an object with contents produces that same object with no contents as the result',test:function(){var _bc={foo:1,bar:1},_j=Uize.emptyOut(_bc);return this.expect(true,_bc==_j)&&this.expect(_bc,{});}},['Test that specifying the value null for the source produces the value null as the result',null,null],['Test that specifying the value undefined for the source produces the value undefined as the result',undefined,undefined]]],['Uize.recordMatches',[['Test that specifying the value null for the record produces the result false',[null,{foo:'bar'}],false],['Test that specifying the value undefined for the record produces the result false',[undefined,{foo:'bar'}],false],['Test that specifying the value null for the match object produces the result true',[{foo:'bar'},null],true],['Test that specifying the value undefined for the match object produces the result true',[{foo:'bar'},undefined],true],
['Test that specifying an empty match object produces the result true',[{foo:'bar'},{}],true],['Test that specifying a match object that contains properties that aren\'t in the record produces the result false',[{foo:'bar'},{hello:'world'}],false],['Test that specifying a match object with a property that is in the record but whose value is not the same produces the result false',[{meaningOfLife:42},{meaningOfLife:'dunno'}],false],['Test that specifying a match object with a property that is in the record and whose values is equal but not in a strict equality produces the result false',[{meaningOfLife:42},{meaningOfLife:'42'}],false],['Test that specifying a match object with a property that is in the record and whose values is equal in a strict equality produces the result true',[{meaningOfLife:42},{meaningOfLife:42}],true],['Test that specifying a match object with multiple properties and that is only a partial match with the record produces the result false',
[{foo:'bar',hello:'world',meaningOfLife:42},{foo:'bar',hello:'there',meaningOfLife:42}],false],['Test that specifying a match object with multiple properties and that is a complete match with the record produces the result true',[{foo:'bar',hello:'world',meaningOfLife:42},{foo:'bar',hello:'world',meaningOfLife:42}],true],['Test that properties that are in the record but that are not in the match object are not considered and do not affect the success of the match',[{foo:'bar',hello:'world',meaningOfLife:42},{meaningOfLife:42}],true]]],['Uize.findRecordNo',[['Test that specifying null for the records results in the default number being returned',[null,{},5],5],['Test that specifying undefined for the records results in the default number being returned',[undefined,{},5],5],['Test that not specifying a default number results in the value -1 being used for default number',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'}],-1],
['Test that specifying the value null for default number is treated as a default number of -1',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},null],-1],['Test that specifying the value undefined for default number is treated as a default number of -1',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},undefined],-1],['Test that specifying a string value for detault number results in it being coerced to a number',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},'5'],5],['Test that specifying a boolean value for the default number results in it being coerced to a number',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},true],1],['Test that specifying an object value for the default number results in it being coerced to a number',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},new _f({value:5})],5],['Test that specifying an object value for the default number that cannot be coerced to a number results in the value -1 being used for the default number',
[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},new _f({value:'blah'})],-1],['Test that the index of the first matching record is returned when the match matches a record',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'bar'}],1],['Test that the value 0 is returned when the value null is specified for the match',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],null],0]]],['Uize.findRecord',[['Test that specifying null for the records results in the value null being returned',[null,{},5],null],['Test that specifying undefined for the records results in the value null being returned',[undefined,{},5],null],{title:'Test that the first matching record is returned when the match matches a record',test:function(){var _bd=[{foo:'boo'},{foo:'bar'},{foo:'foo'}];return this.expectSameAs(_bd[1],Uize.findRecord(_bd,{foo:'bar'}));}},{title:'Test that the first record is returned when the value null is specified for the match',test:function(){var _bd=[{foo:'boo'},{foo:'bar'},{foo:'foo'}];
return this.expectSameAs(_bd[0],Uize.findRecord(_bd,null));}},{title:'Test that the record for the specified default record number is returned when no matching record is found',test:function(){var _bd=[{foo:'boo'},{foo:'bar'},{foo:'foo'}];return this.expectSameAs(_bd[2],Uize.findRecord(_bd,{foo:'woo'},2));}}]],['Uize.getGuid',[{title:'Test that a string type value is returned, as expected',test:function(){return this.expectNonEmptyString(Uize.getGuid())}},{title:'Test that result is different across ten successive calls',test:function(){var _be=[];for(var _bf= -1;++_bf<10;)_be.push(Uize.getGuid());return this.expectNoRepeats(_be);}}]],['Uize.getPathToLibrary',[]],['Uize.globalEval',[]],['Uize.isInstance',[['Test that calling with no parameters produces the result false',[],false],['Test that null is not regarded as a Uize subclass instance',null,false],['Test that undefined is not regarded as a Uize subclass instance',undefined,false],
['Test that a string is not regarded as a Uize subclass instance','hello',false],['Test that a number is not regarded as a Uize subclass instance',5,false],['Test that a boolean is not regarded as a Uize subclass instance',true,false],['Test that a simple object is not regarded as a Uize subclass instance',{},false],['Test that an array is not regarded as a Uize subclass instance',[],false],['Test that a regular expression is not regarded as a Uize subclass instance',/\d+/,false],['Test that a function is not regarded as a Uize subclass instance',function(){},false],['Test that a Uize class is not regarded as a Uize subclass instance',Uize,false],['Test that a Uize package is not regarded as a Uize subclass instance',Uize.Data,false],['Test that a Uize instance is correctly regarded as a Uize subclass instance',new Uize,true]]],['Uize.clone',[['Test that cloning the value null produces the value null',null,null],['Test that cloning the value undefined produces the value undefined',undefined,undefined],
['Test that cloning an empty string produces an empty string','',''],['Test that cloning a non-empty string is handled correctly','solar','solar'],['Test that cloning the value 0 produces the value 0',0,0],['Test that cloning a negative number is handled correctly',-1,-1],['Test that cloning a positive number is handled correctly',1,1],['Test that cloning the special number value NaN is handled correctly',NaN,NaN],['Test that cloning the special number value Infinity is handled correctly',Infinity,Infinity],['Test that cloning the special number value -Infinity is handled correctly',-Infinity,-Infinity],['Test that cloning the boolean value false produces the value false',false,false],['Test that cloning the boolean value true produces the value true',true,true],_k('Test that cloning an instance of the RegExp object is handled correctly',RegExp,new RegExp('^\\s+$','gim')),_k('Test that cloning an instance of the Date object is handled correctly',Date,'2001/9/11'),_k(
'Test that cloning an instance of the String object is handled correctly',String,'solar'),_k('Test that cloning an instance of the Number object is handled correctly',Number,42),_k('Test that cloning an instance of the Boolean object is handled correctly',Boolean,true),['Test that cloning an empty object produces an empty object',{},{}],_k('Test that the clone of an object is not a reference to that object, but is a new object',Object,{}),['Test that cloning a non-empty object produces an identical copy of that object',_a,_a],['Test that cloning an empty array produces an empty array',[[]],[]],_k('Test that the clone of an array is not a reference to that array, but is a new array',Array,[]),['Test that cloning a non-empty array produces an identical copy of that array',[_b],_b],['Test that cloning a complex object data structure is handled correctly',[_c],_c],['Test that cloning a complex array data structure is handled correctly',[_d],_d],{
title:'Test that cloning a function simply returns a reference to that function',test:function(){var _bg=function(){};return this.expectSameAs(_bg,Uize.clone(_bg))}},{title:'Test that cloning a Uize class instance simply returns a reference to that instance',test:function(){var _bg=new Uize;return this.expectSameAs(_bg,Uize.clone(_bg))}},['Test that specifying no parameter is equivalent to cloning the value undefined',[],undefined]]],['Uize.callOn',[{title:'Test that specifying null for the object results in no action',test:function(){var _t=true;Uize.callOn(null,function(){_t=false});return _t;}},{title:'Test that specifying undefined for the object results in no action',test:function(){var _t=true;Uize.callOn(undefined,function(){_t=false});return _t;}},{title:'Test that specifying a value for method that is neither a string nor a function results in no error being produced',test:function(){var _bb=new Uize;Uize.callOn(_bb);Uize.callOn(_bb,null);Uize.callOn(_bb,undefined);Uize.callOn(_bb,42);
Uize.callOn(_bb,true);Uize.callOn(_bb,{});Uize.callOn(_bb,[]);return true;}},{title:'Test that specifying a function as the method and an instance as the target results in the function being called as an instance method on the instance',test:function(){var _bb=new Uize,_t=false;Uize.callOn(_bb,function(){_t=this==_bb});return _t;}},{title:'Test that when the optional arguments parameter is not specified, the arguments are defaulted to an empty array',test:function(){var _bb=new Uize,_t=false;Uize.callOn(_bb,function(){_t=arguments.length==0});return _t;}},{title:'Test that when the optional arguments parameter is specified, those arguments are passed in the call correctly',test:function(){var _bb=new Uize,_bh=['foo',42,true],_bi;Uize.callOn(_bb,function(){_bi=_h(arguments)},_bh);return this.expect(_bh,_bi);}},{title:'Test that specifying the target as an instance and the method as a string does not result in an error being produced when the method is not defined on the instance',test:function(){var
 _bb=new Uize,_bj='SOME-BOGUS-METHOD-NAME';delete _bb[_bj];Uize.callOn(_bb,_bj);return true;}},{title:'Test that specifying the target as an instance and the method as a string results in the specified method being called as an instance method on the instance',test:function(){var _bb=new Uize,_t=false,_bh=['foo',42,true],_bi;_bb.someSillyMethodName=function(){_bi=_h(arguments)};Uize.callOn(_bb,'someSillyMethodName',_bh);return this.expect(_bh,_bi);}},{title:'Test that specifying an array as the target results in the method being called correctly on all elements of the array',test:function(){var _bk=[],_bl=Uize.subclass(),_bm=['foo',42,true],_bn=new _bl({name:'subTarget0'}),_bo=new _bl({name:'subTarget1'}),_bp=new _bl({name:'subTarget2'}),_bb=[_bn,_bo,_bp];Uize.callOn(_bb,function(){_bk.push({_bq:this.get('name'),_i:_h(arguments)});},_bm);return this.expect([{_bq:'subTarget0',_i:_bm},{_bq:'subTarget1',_i:_bm},{_bq:'subTarget2',_i:_bm}],_bk);}},{title:
'Test that specifying an object as the target results in the method being called correctly on all property values of the object',test:function(){var _bk=[],_bl=Uize.subclass(),_bm=['foo',42,true],_bn=new _bl({name:'subTarget0'}),_bo=new _bl({name:'subTarget1'}),_bp=new _bl({name:'subTarget2'}),_bb={foo:_bn,bar:_bo,helloworld:_bp};Uize.callOn(_bb,function(){_bk.push({_bq:this.get('name'),_i:[].concat.apply([],arguments)});},_bm);return this.expect([{_bq:'subTarget0',_i:_bm},{_bq:'subTarget1',_i:_bm},{_bq:'subTarget2',_i:_bm}],_bk);}},{title:'Test that recursion is handled correctly when the target is a complex data structure',test:function(){var _br=[],_bs=[],_bl=Uize.subclass(),_bm=['foo',42,true],_bt= -1;function _bu(){var _bv='subTarget'+ ++_bt;_br.push({_bq:_bv,_i:_bm});return new _bl({name:_bv});}var _bb={foo:_bu(),bar:[_bu(),{hello:_bu(),there:{silly:_bu(),sausage:_bu()},world:_bu()},[_bu(),_bu()]],blah:_bu()};Uize.callOn(_bb,function(){_bs.push({_bq:this.get('name'),_i:[].concat.apply([],arguments)});},
_bm);return this.expect(_br,_bs);}},{title:'Test that a function can be called as a method on values that are primitives or instances of objects that are not Uize subclasses',test:function(){var _bw=[true,42,'foo',NaN,new Date('01/01/2011'),/\d+/],_bx=[],_by=[];for(var _bz= -1,_bA=_bw.length;++_bz<_bA;)_bx.push(_bw[_bz]+'');Uize.callOn(_bw,function(){_by.push(this+'')});return this.expect(_bx,_by);}}]],['Uize.keys',[['Test that an object\'s keys are reported correctly',[{foo:1,bar:2}],['foo','bar']],['Test that a populated array\'s keys are reported correctly',[['a','b','c','d']],['0','1','2','3']],['Test that a sparsely populated array\'s keys are reported correctly',[_e],['2','7']],['Test that a non-zero length array that is unpopulated has no keys',[new Array(5)],[]],['Test that an empty array has no keys',[[]],[]],['Test that an empty object has no keys',[{}],[]],['Test that null has no keys',null,[]],['Test that undefined has no keys',undefined,[]],['Test that a boolean value has no keys',false,[]],
['Test that a number value has no keys',5,[]],['Test that a string value has no keys','hello',[]]]],['Uize.totalKeys',[['Test that an object\'s total keys are reported correctly',[{foo:1,bar:2}],2],['Test that a populated array\'s total keys are reported correctly',[['a','b','c','d']],4],['Test that a sparsely populated array\'s total keys are reported correctly',[_e],2],['Test that a non-zero length array that is unpopulated has 0 keys',[new Array(5)],0],['Test that an empty array has 0 keys',[[]],0],['Test that an empty object has 0 keys',[{}],0],['Test that null has 0 keys',null,0],['Test that undefined has 0 keys',undefined,0],['Test that a boolean value has 0 keys',false,0],['Test that a number value has 0 keys',5,0],['Test that a string value has 0 keys','hello',0]]],['Uize.values',[['Test that an object\'s values are reported correctly',[{foo:1,bar:2}],[1,2]],['Test that a populated array\'s values are reported correctly',[['a','b','c','d']],['a','b','c','d']],{
title:'Test that getting values for an array simply returns the array',test:function(){return Uize.values(_e)==_e}},['Test that a sparsely populated array\'s values are reported correctly',[_e],_e],['Test that a non-zero length array that is unpopulated has no values',[new Array(5)],new Array(5)],['Test that an empty array has no values',[[]],[]],['Test that an empty object has no values',[{}],[]],['Test that null has no values',null,[]],['Test that undefined has no values',undefined,[]],['Test that a boolean value has no values',false,[]],['Test that a number value has no values',5,[]],['Test that a string value has no values','hello',[]]]],['Uize.lookup',[['Test that true is the default value for the lookupValue paramter',[['foo','bar']],{foo:true,bar:true}],['Test that default can be specified as a value for the lookupValue paramter',[['foo','bar'],undefined],{foo:undefined,bar:undefined}],['Test that a values array with duplicate values is handled correctly',[['foo','foo','bar','bar']],{foo:true,bar:true}
],['Test that a values array with different types of values is handled correctly',[['','string',true,4.01,NaN,Infinity,null,undefined],1],{'':1,'string':1,'true':1,'4.01':1,'NaN':1,'Infinity':1,'null':1,'undefined':1}],['Test that an empty values array produces an empty lookup object',[[]],{}],['Test that a sparsely populated values array produces a lookup object with a single "undefined" key for all the missing/undefined element values',[_e],{1:true,2:true,'undefined':true}],['Test that a non-zero length values array that is unpopulated produces a lookup object with a single "undefined" key for all the undefined element values',[new Array(5)],{'undefined':true}]]],['Uize.reverseLookup',[['Test that calling with no parameter produces an empty object',[],{}],['Test that calling with the value null specified produces an empty object',[null],{}],['Test that calling with the value undefined specified produces an empty object',[undefined],{}],['Test that an object with no duplicate values is handled correctly',
[{foo:1,bar:2}],{1:'foo',2:'bar'}],['Test that an object with duplicate values is handled as expected (last mapping wins)',[{foo:1,bar:1}],{1:'bar'}],['Test that an empty object produces an empty reverse lookup object',[{}],{}],['Test that an object with different types of values is handled correctly',[{prop1:'',prop2:'string',prop3:true,prop4:4.01,prop5:NaN,prop6:Infinity,prop7:null,prop8:undefined}],{'':'prop1','string':'prop2','true':'prop3','4.01':'prop4','NaN':'prop5',Infinity:'prop6','null':'prop7','undefined':'prop8'}],['Test that an array can be specified as a source object',[['foo','bar']],{foo:'0',bar:'1'}],['Test that an empty array produces an empty reverse lookup object',[{}],{}],['Test that a sparsely populated values array produces a reverse lookup object with no "undefined" key for missing/undefined element values',[_e],{1:'2',2:'7'}],['Test that a non-zero length values array that is unpopulated produces an empty reverse lookup object',[new Array(5)],{}],
['Test that null produces an empty reverse lookup object',null,{}],['Test that undefined produces an empty reverse lookup object',undefined,{}],['Test that a boolean value produces an empty reverse lookup object',false,{}],['Test that a number value produces an empty reverse lookup object',5,{}],['Test that a string value produces an empty reverse lookup object','hello',{}]]],['Uize.max',[['Test that the maximum value from an object is reported correctly',[{foo:1,bar:2}],2],['Test that the maximum value from an array is reported correctly',[[1,2]],2],['Test that the maximum value from a sparsely populated array is NaN',[_e],NaN],['Test that the maximum value from a non-zero length array that is unpopulated is NaN',[new Array(5)],NaN],['Test that the maximum value from an empty array is -Infinity',[[]],-Infinity],['Test that the maximum value from an empty object is -Infinity',[{}],-Infinity],['Test that the maximum value from null is -Infinity',null,-Infinity],
['Test that the maximum value from undefined is -Infinity',undefined,-Infinity],['Test that the maximum value from a boolean value is -Infinity',false,-Infinity],['Test that the maximum value from a number value is -Infinity',5,-Infinity],['Test that the maximum value from a string value is -Infinity','hello',-Infinity]]],['Uize.min',[['Test that the minimum value from an object is reported correctly',[{foo:1,bar:2}],1],['Test that the minimum value from an array is reported correctly',[[1,2]],1],['Test that the minimum value from a sparsely populated array is NaN',[_e],NaN],['Test that the minimum value from a non-zero length array that is unpopulated is NaN',[new Array(5)],NaN],['Test that the minimum value from an empty array is Infinity',[[]],Infinity],['Test that the minimum value from an empty object is Infinity',[{}],Infinity],['Test that the minimum value from null is Infinity',null,Infinity],['Test that the minimum value from undefined is Infinity',undefined,Infinity],
['Test that the minimum value from a boolean value is Infinity',false,Infinity],['Test that the minimum value from a number value is Infinity',5,Infinity],['Test that the minimum value from a string value is Infinity','hello',Infinity]]],['Uize.fire',[]],['Uize.wire',[]],['Uize.unwire',[]],['Uize.registerProperties',[]],['Uize.get',[]],['Uize.set',[]],['Uize.toggle',[]],['Uize.toString',[]],['Uize.valueOf',[{title:'Test that the valueOf method of a class returns the value of the special value set-get property for the class (ie. the initial value for the value set-get property)',test:function(){var _2=Uize.subclass();_2.registerProperties({_g:{name:'value',value:'foo'}});return this.expect(_2.valueOf(),'foo');}},{title:'Test that the valueOf method of an instance returns the value of the special value set-get property for the instance',test:function(){var _2=Uize.subclass();_2.registerProperties({_g:{name:'value',value:'foo'}});var _bB=new _2;return this.expect(_bB.valueOf(),'foo');}}]],['Uize.module',[]],
['Uize.subclass',[]]]),{title:'Test the event system for instances and classes',test:[_q('Test that the event system works for instances',true),_q('Test that the event system works for classes',false)]},{title:'Test the set-get properties system',test:[{title:'Test registering set-get properties',test:[{title:'Test that a set-get property can be registered using the minimal profile syntax',test:function(){var _2=Uize.subclass();_2.registerProperties({_bC:'myProperty'});var _bB=new _2;return this.expect({myProperty:undefined},_bB.get());}},{title:'Test that a set-get property can be registered using the complete profile syntax',test:function(){var _2=Uize.subclass();_2.registerProperties({_bC:{name:'myProperty'}});var _bB=new _2;return this.expect({myProperty:undefined},_bB.get());}},{title:'Test that multiple properties can be registered in a single call to the registerProperty method, and that minimal and complete profiles can be combined',test:function(){var _2=Uize.subclass();_2.registerProperties({
_bD:'myProperty1',_bE:{name:'myProperty2'}});var _bB=new _2;return this.expect({myProperty1:undefined,myProperty2:undefined},_bB.get());}},{title:'Test that the public name of a set-get property is defaulted when no value is specified for the name property in the property profile',test:function(){var _2=Uize.subclass();_2.registerProperties({myProperty:{}});var _bB=new _2;return this.expect({myProperty:undefined},_bB.get());}},{title:'Test that set-get properties can be registered in an ad hoc fashion, by specifying values for unregistered properties when calling the constructor',test:function(){var _2=Uize.subclass(),_bF=new _2({foo:'bar'}),_bG=new _2;return this.expect({foo:undefined},_bG.get());}},{title:'Test that set-get properties can be registered in an ad hoc fashion, by setting values for unregistered properties using the set instance method',test:function(){var _2=Uize.subclass(),_bF=new _2;_bF.set({foo:'bar'});var _bG=new _2;return this.expect({foo:undefined},_bG.get());}},{title:
'Test that set-get properties can be registered in an ad hoc fashion, by setting values for unregistered properties using the set static method',test:function(){var _2=Uize.subclass();_2.set({foo:'bar'});var _bB=new _2;return this.expect({foo:'bar'},_bB.get());}},{title:'Test that multiple set-get properties can be registered cumulatively by calling registerProperties repeatedly',test:function(){var _2=Uize.subclass();_2.registerProperties({_bD:'myProperty1'});_2.registerProperties({_bE:{name:'myProperty2'}});var _bB=new _2;return this.expect({myProperty1:undefined,myProperty2:undefined},_bB.get());}}]},{title:'Test setting values for set-get properties for instances and classes',test:[_1('Test that the set method works for instances',true),_1('Test that the set method works for classes',false)]},{title:'Test getting values for set-get properties for instances and classes',test:[_5('Test that the get method works for instances',true),_5('Test that the get method works for classes',false)]},{
title:'Test the initial value facility',test:[{title:'Test that when no initial value is specified for a set-get property, the property\'s initial value is undefined',test:function(){var _2=Uize.subclass();_2.registerProperties({myProperty:{}});var _bB=new _2;return this.expect(undefined,_bB.get('myProperty'));}},{title:'Test that specifying a value property in a set-get property\'s profile when registering it has the effect of setting the initial value for that property for new instances that are created',test:function(){var _2=Uize.subclass();_2.registerProperties({myProperty:{value:'initial value'}});var _bB=new _2;return this.expect('initial value',_bB.get('myProperty'));}},{title:'Test that null is supported as an initial value for a set-get property and that it is not treated the same as undefined',test:function(){var _2=Uize.subclass();_2.registerProperties({myProperty:{value:null}});var _bB=new _2;return this.expect(null,_bB.get('myProperty'));}},{title:
'Test that the initial value registered for a property is returned as the result when querying the value of that set-get property on the class',test:function(){var _2=Uize.subclass();_2.registerProperties({myProperty:{value:'initial value'}});return this.expect('initial value',_2.get('myProperty'));}},{title:'Test that setting the value for a set-get property on the class has the effect of setting the initial value for the property',test:function(){var _2=Uize.subclass();_2.registerProperties({myProperty:{}});_2.set({myProperty:'initial value'});var _bB=new _2;return this.expect('initial value',_bB.get('myProperty'));}},{title:'Test that setting the value for a set-get property on the class does not affect the value of the property for instances that have already been created',test:function(){var _2=Uize.subclass();_2.registerProperties({myProperty:{value:'initial value'}});var _bB=new _2;_2.set({myProperty:'new initial value'});return this.expect('initial value',_bB.get('myProperty'));}}]},{
title:'Test the onChange handlers mechanism',test:[{title:'Test that an onChange handler for a set-get property is executed on the very first change of the value of that property that occurs during construction of the instance',test:function(){var _2=Uize.subclass(),_bH=0;_2.registerProperties({myProperty:{value:'initial value',onChange:function(){_bH++}}});var _bB=new _2;return this.expect(1,_bH);}},{title:'Test that an onChange handler for a set-get property is only executed once upon construction when a value specified for the property in the constructor differs from the property\'s initial value',test:function(){var _2=Uize.subclass(),_bH=0;_2.registerProperties({myProperty:{value:'initial value',onChange:function(){_bH++}}});var _bB=new _2({myProperty:'new value'});return this.expect(1,_bH);}},{title:'Test that an onChange handler is only executed when the value of a set-get property has actually changed as a result of a set - not on non-changing sets',test:function(){var _2=Uize.subclass(),_bI=0;
_2.registerProperties({myProperty:{value:'initial value',onChange:function(){_bI++}}});var _bB=new _2;_bB.set({myProperty:'initial value'});_bB.set({myProperty:'new value'});_bB.set({myProperty:'new value'});return this.expect(2,_bI);}},{title:'Test that an onChange handler is called as a method on the instance that owns the set-get property',test:function(){var _2=Uize.subclass(),_bJ;_2.registerProperties({myProperty:{value:'initial value',onChange:function(){_bJ=this}}});var _bB=new _2;return this.expect(_bB,_bJ);}},{title:'Test that the value of the set-get property has already changed by the time that an onChange handler is called',test:function(){var _2=Uize.subclass(),_bK;_2.registerProperties({myProperty:{value:'initial value',onChange:function(){_bK=this.get('myProperty');}}});var _bB=new _2;_bB.set({myProperty:'new value'});return this.expect('new value',_bK);}},{title:
'Test that an onChange handler can be specified by a string, where that string specifies the name of a method that must be defined for the instance',test:function(){var _2=Uize.subclass(),_bI=0;_2.prototype.someMethod=function(){_bI++};_2.registerProperties({myProperty:{value:'initial value',onChange:'someMethod'}});var _bB=new _2;_bB.set({myProperty:'new value'});return this.expect(2,_bI);}},{title:'Test that an array of multiple onChange handlers can be specified for a set-get property, and that all of them are executed, in the order in which they appear in the array',test:function(){var _2=Uize.subclass(),_w=[];_2.registerProperties({myProperty:{value:'initial value',onChange:[function(){_w.push('onChangeHandler1')},function(){_w.push('onChangeHandler2')},function(){_w.push('onChangeHandler3')}]}});var _bB=new _2;return this.expect('onChangeHandler1,onChangeHandler2,onChangeHandler3',_w+'');}},{title:
'Test that an array of multiple onChange handlers may contain a mix of handlers specified by function reference, handlers specified by method name, and nested lists of handlers',test:function(){var _2=Uize.subclass(),_w=[];_2.prototype.someMethod1=function(){_w.push('onChangeHandlerSpecifiedByString1');};_2.prototype.someMethod2=function(){_w.push('onChangeHandlerSpecifiedByString2');};_2.registerProperties({myProperty:{value:'initial value',onChange:[function(){_w.push('onChangeSpecifiedByFunction1')},function(){_w.push('onChangeSpecifiedByFunction2')},function(){_w.push('onChangeSpecifiedByFunction3')},'someMethod1',[function(){_w.push('onChangeSpecifiedByFunction4')},'someMethod2',function(){_w.push('onChangeSpecifiedByFunction5')}]]}});var _bB=new _2;return this.expect(['onChangeSpecifiedByFunction1','onChangeSpecifiedByFunction2','onChangeSpecifiedByFunction3','onChangeHandlerSpecifiedByString1','onChangeSpecifiedByFunction4','onChangeHandlerSpecifiedByString2','onChangeSpecifiedByFunction5'],_w);}},{
title:'Test that all onChange handlers receive a single argument when it is called, which is an object containing the conformed values for all properties being set (not just those that have changed value)',test:function(){var _2=Uize.subclass(),_bL,_bM,_bN,_bO={foo:'the value of foo',bar:'the new value of bar',myProperty:'new value'};_2.registerProperties({foo:{value:'the value of foo'},bar:{value:'the value of bar',onChange:function(){_bL=_h(arguments);}},helloWorld:{value:'Hello, world!'},myProperty:{value:'initial value',onChange:[function(){_bM=_h(arguments);},function(){_bN=_h(arguments);}]}});var _bB=new _2;_bB.set(_bO);return(this.expect([_bO],_bL)&&this.expect([_bO],_bM)&&this.expect([_bO],_bN));}},{title:'Test that onChange handlers are called for all set-get properties that have changed value in the course of the same set call',test:function(){var _2=Uize.subclass(),_bP,_bQ,_bR,_w=[];_2.registerProperties({foo:{value:'the value of foo'},bar:{value:'the value of bar',onChange:function(){_bP++}},
helloWorld:{value:'Hello, world!',onChange:function(){_bQ++}},myProperty:{value:'initial value',onChange:function(){_bR++}}});var _bB=new _2;_bP=_bQ=_bR=0;_bB.set({foo:'new value of foo',bar:'the new value of bar',helloWorld:'Hello, world!',myProperty:'new value of myProperty'});return(this.expect(1,_bP)&&this.expect(0,_bQ)&&this.expect(1,_bR));}},{title:'Test that an onChange handler is not called for any instances of a class when the value of the set-get property is set on the class',test:function(){var _2=Uize.subclass(),_bI=0;_2.registerProperties({myProperty:{value:'initial value',onChange:function(){_bI++}}});var _bF=new _2,_bG=new _2,_bS=new _2,_bT=_bI;;_bI=0;_2.set({myProperty:'new initial value'});return(this.expect(3,_bT)&&this.expect(0,_bI));}},{title:'Test that a set-get property\'s onChange handler is only called for an instance of the class whose value for the property has changed (ie. no contamination across instances)',test:function(){var _2=Uize.subclass(),_w=[];_2.registerProperties({
name:{},myProperty:{value:'initial value',onChange:function(){_w.push(this.get('name'))}}});var _bF=new _2({name:'instance1'}),_bG=new _2({name:'instance2'}),_bS=new _2({name:'instance3'});_w=[];_bG.set({myProperty:'new value'});return this.expect(['instance2'],_w);}},{title:'Test that an onChange handler is only executed if the value of a set-get property has changed after being conformed, and not just if the pre-conformed value is different from the current value',test:function(){var _2=Uize.subclass(),_bU=[];_2.registerProperties({name:{},myProperty:{value:0,conformer:function(_g){return Math.max(Math.min(_g,100),0);},onChange:function(){_bU.push(this.get('myProperty'));}}});var _bB=new _2;_bB.set({myProperty:-10});_bB.set({myProperty:10});_bB.set({myProperty:10});_bB.set({myProperty:100});_bB.set({myProperty:200});_bB.set({myProperty:-200});_bB.set({myProperty:0});return this.expect([0,10,100,0],_bU);}},{title:
'Test that when the same onChange handler is registered for multiple set-get properties, it is only executed once - even if the values of all those properties change during a set',test:function(){var _2=Uize.subclass(),_bV=0,_bW=0;_2.prototype.someMethod=function(){_bV++};function _bX(){_bW++};_2.registerProperties({myProperty1:{value:'initial value',onChange:['someMethod',_bX]},myProperty2:{value:'initial value',onChange:['someMethod',_bX]},myProperty3:{value:'initial value',onChange:['someMethod',_bX]}});var _bB=new _2;_bB.set({myProperty1:'new value',myProperty2:'new value',myProperty3:'new value'});return(this.expect(2,_bV)&&this.expect(2,_bW));}},{title:'Test that the execute-once optimization for onChange handlers shared across properties does not prevent an onChange handler from executing on subsequent sets (ie. cleanup occurs correctly)',test:function(){var _2=Uize.subclass(),_bH=0,_bY=0,_bZ=0,_b0=0;function _bX(){_bH++};_2.registerProperties({myProperty1:{onChange:_bX},myProperty2:{onChange:_bX},
myProperty3:{onChange:_bX}});var _bB=new _2;_bB.set({myProperty1:++_bY,myProperty2:++_bZ,myProperty3:++_b0});_bB.set({myProperty1:++_bY});_bB.set({myProperty2:++_bZ});_bB.set({myProperty3:++_b0});return this.expect(4,_bH);}}]},{title:'Test the conformer mechanism',test:[{title:'Test that a set-get property\'s conformer function is called as an instance method on the instance for which the property values are being set',test:function(){var _2=Uize.subclass(),_b1;_2.registerProperties({myProperty:{conformer:function(){_b1=this},value:5}});var _bB=new _2;_bB.set({myProperty:42});return this.expectSameAs(_bB,_b1);}},{title:'Test that a set-get property\'s conformer function is called with two arguments, where the first argument is the new value being set for the property, and the second argument is the current value of the property',test:function(){var _2=Uize.subclass(),_b2=[42,5],_b3;_2.registerProperties({myProperty:{conformer:function(_b4,_b5){_b3=_h(arguments);return _b4;},value:5}});var _bB=new _2;
_bB.set({myProperty:42});return this.expect(_b2,_b3);}},{title:'Test that the value returned by a conformer function is treated as the new value to be set for the property',test:function(){var _2=Uize.subclass();_2.registerProperties({myProperty:{conformer:function(){return'foo'},value:5}});var _bB=new _2;_bB.set({myProperty:42});return this.expect('foo',_bB.get('myProperty'));}},{title:'Test that a set-get property\'s conformer function is executed before the value of the property has changed',test:function(){var _2=Uize.subclass(),_b6=[],_b7=[undefined,5];_2.registerProperties({myProperty:{conformer:function(_b4){_b6.push(this.get('myProperty'));return _b4;},value:5}});var _bB=new _2;_bB.set({myProperty:42});return this.expect(_b7,_b6);}},{title:'Test that a set-get property\'s conformer function is called before its onChange handlers are called',test:function(){var _2=Uize.subclass(),_b8=['conformer','onChange'],_b9=[];_2.registerProperties({myProperty:{conformer:function(_b4){_b9.push('conformer');
return _b4;},onChange:function(){_b9.push('onChange')},value:5}});var _bB=new _2;return this.expect(_b8,_b9);}},{title:'Test that, if a set-get property\'s value does not change as a result of the action of a conformer, then the property\'s onChange handlers are not executed',test:function(){var _2=Uize.subclass(),_b8=['conformer'],_b9=[];_2.registerProperties({myProperty:{conformer:function(_b4,_ca){_b9.push('conformer');return _ca;},onChange:function(){_b9.push('onChange')},value:5}});var _bB=new _2;return this.expect(_b8,_b9);}}]},{title:'Test the Changed.[propertyName] event mechanism',test:[{title:'Test that the Changed.[propertyName] event for a property is not fired when the property\'s value is set but doesn\'t change value',test:function(){var _2=Uize.subclass(),_cb=0;_2.registerProperties({myProperty:{value:'initial value'}});var _bB=new _2;_bB.wire('Changed.myProperty',function(){_cb++});_bB.set({myProperty:'initial value'});return this.expect(0,_cb);}},{title:
'Test that the Changed.[propertyName] event for a property is fired when the property\'s value changes during a set',test:function(){var _2=Uize.subclass(),_cb=0;_2.registerProperties({myProperty:{value:'initial value'}});var _bB=new _2;_bB.wire('Changed.myProperty',function(){_cb++});_bB.set({myProperty:'new value'});return this.expect(1,_cb);}},{title:'Test that the Changed.[propertyName] events for set-get properties that have changed value are fired after all the onChange handlers for the properties have been executed',test:function(){var _2=Uize.subclass(),_w=[];_2.registerProperties({myProperty1:{value:'myProperty1 initial value',onChange:[function(){_w.push('myProperty1 onChange handler 1')},function(){_w.push('myProperty1 onChange handler 2')}]},myProperty2:{value:'myProperty2 initial value',onChange:[function(){_w.push('myProperty2 onChange handler 1')},function(){_w.push('myProperty2 onChange handler 2')}]}});var _bB=new _2;_w=[];_bB.wire('Changed.myProperty1',
function(){_w.push('Changed.myProperty1 handler')});_bB.wire('Changed.myProperty2',function(){_w.push('Changed.myProperty2 handler')});_bB.set({myProperty1:'myProperty1 new value',myProperty2:'myProperty2 new value'});return this.expect(['myProperty1 onChange handler 1','myProperty1 onChange handler 2','myProperty2 onChange handler 1','myProperty2 onChange handler 2','Changed.myProperty1 handler','Changed.myProperty2 handler'],_w);}},{title:'Test that the Changed.[propertyName] events for set-get properties that have changed value are fired in the order in which the properties are set - not the order in which they were registered',test:function(){var _2=Uize.subclass(),_w=[];_2.registerProperties({myProperty1:{value:'myProperty1 initial value'},myProperty2:{value:'myProperty2 initial value'}});var _bB=new _2;_bB.wire('Changed.myProperty1',function(){_w.push('Changed.myProperty1 handler')});_bB.wire('Changed.myProperty2',function(){_w.push('Changed.myProperty2 handler')});_bB.set({
myProperty2:'myProperty2 new value',myProperty1:'myProperty1 new value'});return this.expect(['Changed.myProperty2 handler','Changed.myProperty1 handler'],_w);}},{title:'Test that handlers for the special Changed.[propertyName] event can be wired, unwired, and rewired just like any regular event',test:function(){var _2=Uize.subclass(),_w=[],_b4=0;_2.registerProperties({myProperty:{}});var _bB=new _2;function _cc(_cd){return function(){_w.push('handler '+_cd+', value = '+_bB.get('myProperty'));}}var _E=_cc(1),_F=_cc(2);_bB.wire('Changed.myProperty',_E);_bB.wire('Changed.myProperty',_F);_bB.set('myProperty',++_b4);_bB.unwire('Changed.myProperty',_E);_bB.set('myProperty',++_b4);_bB.wire('Changed.myProperty',_E);_bB.set('myProperty',++_b4);_bB.unwire('Changed.myProperty');_bB.set('myProperty',++_b4);return this.expect(['handler 1, value = 1','handler 2, value = 1','handler 2, value = 2','handler 2, value = 3','handler 1, value = 3'],_w);}},{title:'Test premature wiring of a Changed.[propertyName] event',test:[{
title:'Test that wiring a handler for a Changed.[propertyName] event for a property that has not been registered does not produce a JavaScript error',test:function(){var _2=Uize.subclass(),_bB=new _2;_bB.wire('Changed.nonExistentProperty',function(){});return true;}},{title:'Test that a handler can be wired for a Changed.[propertyName] event for a property that is not yet registered, and that it will get executed when the property is later registered and its value changes',test:function(){var _2=Uize.subclass(),_bB=new _2,_ce=0;_bB.wire('Changed.myProperty',function(){_ce++});_2.registerProperties({myProperty:{}});_bB.set({myProperty:'foo'});return this.expect(1,_ce);}},{title:'Test that a handler can be wired for a Changed.[propertyName] event for a property that is not yet registered, and that it will get executed if the property is registered in an ad hoc fashion by setting its value',test:function(){var _2=Uize.subclass(),_bB=new _2,_ce=0;_bB.wire('Changed.myProperty',function(){_ce++});
_bB.set({myProperty:'foo'});return this.expect(1,_ce);}}]}]},{title:'Test the Changed.* event mechanism',test:[{title:'Test that the Changed.* event is not fired if no set-get properties have changed value during a set',test:function(){var _2=Uize.subclass(),_cf=0;_2.registerProperties({myProperty1:{value:'initial value'},myProperty2:{value:'initial value'},myProperty3:{value:'initial value'}});var _bB=new _2;_bB.wire('Changed.*',function(){_cf++});_bB.set({myProperty1:'initial value',myProperty2:'initial value',myProperty3:'initial value'});return this.expect(0,_cf);}},{title:'Test that the Changed.* event is fired if any set-get property has changed value during a set',test:function(){var _2=Uize.subclass(),_cf=0;_2.registerProperties({myProperty1:{value:'initial value'},myProperty2:{value:'initial value'},myProperty3:{value:'initial value'}});var _bB=new _2;_bB.wire('Changed.*',function(){_cf++});_bB.set('myProperty1','new value');_bB.set('myProperty2','new value');_bB.set('myProperty3','new value');
return this.expect(3,_cf);}},{title:'Test that the Changed.* event is fired only once when multiple set-get properties have changed value',test:function(){var _2=Uize.subclass(),_cf=0;_2.registerProperties({myProperty1:{value:'initial value'},myProperty2:{value:'initial value'},myProperty3:{value:'initial value'}});var _bB=new _2;_bB.wire('Changed.*',function(){_cf++});_bB.set({myProperty1:'new value',myProperty2:'new value',myProperty3:'new value'});return this.expect(1,_cf);}},{title:'Test that the event object for the Changed.* event contains a properties property, which is an object containing values for only those properties that have changed value',test:function(){var _2=Uize.subclass(),_cg;_2.registerProperties({myProperty1:{value:'initial value'},myProperty2:{value:'initial value'},myProperty3:{value:'initial value'}});var _bB=new _2;_bB.wire('Changed.*',function(_v){_cg=_v.properties});_bB.set({myProperty2:'initial value',myProperty3:'new value'});return this.expect({myProperty3:'new value'},_cg);}},
{title:'Test that the Changed.* event is fired after all the onChange handlers for set-get properties that have changed value have been executed, but before handlers for the Changed.[propertyName] events for individual properties are executed',test:function(){var _2=Uize.subclass(),_w=[];_2.registerProperties({myProperty1:{value:'myProperty1 initial value',onChange:[function(){_w.push('myProperty1 onChange handler 1')},function(){_w.push('myProperty1 onChange handler 2')}]},myProperty2:{value:'myProperty2 initial value',onChange:[function(){_w.push('myProperty2 onChange handler 1')},function(){_w.push('myProperty2 onChange handler 2')}]}});var _bB=new _2;_w=[];_bB.wire({'Changed.myProperty1':function(){_w.push('Changed.myProperty1 handler')},'Changed.myProperty2':function(){_w.push('Changed.myProperty2 handler')},'Changed.*':function(){_w.push('Changed.* handler')}});_bB.set({myProperty1:'myProperty1 new value',myProperty2:'myProperty2 new value'});return this.expect(['myProperty1 onChange handler 1',
'myProperty1 onChange handler 2','myProperty2 onChange handler 1','myProperty2 onChange handler 2','Changed.* handler','Changed.myProperty1 handler','Changed.myProperty2 handler'],_w);}},{title:'Test that handlers for the special Changed.* event can be wired, unwired, and rewired just like any regular event',test:function(){var _2=Uize.subclass(),_w=[],_b4=0;_2.registerProperties({myProperty:{}});var _bB=new _2;function _cc(_cd){return function(){_w.push('handler '+_cd+', value = '+_bB.get('myProperty'));}}var _E=_cc(1),_F=_cc(2);_bB.wire('Changed.*',_E);_bB.wire('Changed.*',_F);_bB.set('myProperty',++_b4);_bB.unwire('Changed.*',_E);_bB.set('myProperty',++_b4);_bB.wire('Changed.*',_E);_bB.set('myProperty',++_b4);_bB.unwire('Changed.*');_bB.set('myProperty',++_b4);return this.expect(['handler 1, value = 1','handler 2, value = 1','handler 2, value = 2','handler 2, value = 3','handler 1, value = 3'],_w);}}]},{title:'Test the alias mechanism',test:[{title:
'Test that a set-get property can have multiple aliases, and that its value can be set through any of those aliases',test:function(){var _2=Uize.subclass(),_ch,_ci,_cj;_2.registerProperties({_bC:{name:'myProperty|myPropertyAlias1|myPropertyAlias2'}});var _bB=new _2;_bB.set('myProperty','value set using canonical name');_ch=_bB.get('myProperty');_bB.set('myPropertyAlias1','value set using alias 1');_ci=_bB.get('myProperty');_bB.set('myPropertyAlias2','value set using alias 2');_cj=_bB.get('myProperty');return(this.expect('value set using canonical name',_ch)&&this.expect('value set using alias 1',_ci)&&this.expect('value set using alias 2',_cj));}},{title:'Test that getting the values for all set-get properties results in the values of set-get properties with aliases being reported only through their canonical (non-alias) names',test:function(){var _2=Uize.subclass();_2.registerProperties({_bD:'myProperty1',_bE:'myProperty2|myProperty2Alias1',_ck:'myProperty3|myProperty3Alias1|myProperty3Alias2'});
var _bB=new _2;return this.expect({myProperty1:undefined,myProperty2:undefined,myProperty3:undefined},_bB.get());}},{title:'Test that aliases can be specified using the minimal profile syntax as well as the complete profile syntax',test:function(){var _2=Uize.subclass();_2.registerProperties({_bD:'myProperty1|myProperty1Alias',_bE:{name:'myProperty2|myProperty2Alias'}});var _bB=new _2;_bB.set({myProperty1Alias:'myProperty1 value',myProperty2Alias:'myProperty2 value'});return this.expect({myProperty1:'myProperty1 value',myProperty2:'myProperty2 value'},_bB.get());}},{title:'Test that a value can be set for a set-get property using any of its aliases in the constructor when creating an instance',test:function(){var _2=Uize.subclass();_2.registerProperties({_bD:'myProperty1|myProperty1Alias1|myProperty1Alias2',_bE:'myProperty2|myProperty2Alias1|myProperty2Alias2',_ck:'myProperty3|myProperty3Alias1|myProperty3Alias2'});var _bB=new _2({myProperty1:'myProperty1 value',myProperty2Alias1:'myProperty2 value',
myProperty3Alias2:'myProperty3 value'});return this.expect({myProperty1:'myProperty1 value',myProperty2:'myProperty2 value',myProperty3:'myProperty3 value'},_bB.get());}},{title:'Test that a set-get property\'s value can be accessed using any of its registered aliases',test:function(){var _2=Uize.subclass();_2.registerProperties({_bC:{name:'myProperty|myPropertyAlias1|myPropertyAlias2',value:'myProperty value'}});var _bB=new _2;return(this.expect('myProperty value',_bB.get('myProperty'))&&this.expect('myProperty value',_bB.get('myPropertyAlias1'))&&this.expect('myProperty value',_bB.get('myPropertyAlias2')));}},{title:'Test that handlers can be wired for the Changed.[propertyName] event of a set-get property, using any one of its alias names or its canonical name',test:function(){var _2=Uize.subclass(),_w=[];_2.registerProperties({_bC:'myProperty|myPropertyAlias1|myPropertyAlias2'});var _bB=new _2;_bB.wire('Changed.myProperty',function(){_w.push('handler for Changed.myProperty')});_bB.wire(
'Changed.myPropertyAlias1',function(){_w.push('handler for Changed.myPropertyAlias1')});_bB.wire('Changed.myPropertyAlias2',function(){_w.push('handler for Changed.myPropertyAlias2')});_bB.set({myProperty:'foo'});return this.expect(['handler for Changed.myProperty','handler for Changed.myPropertyAlias1','handler for Changed.myPropertyAlias2'],_w);}},{title:'Test that handlers can be unwired for the Changed.[propertyName] event of a set-get property, using any one of its alias names or its canonical name',test:function(){var _2=Uize.subclass(),_w=[],_b4=0;_2.registerProperties({_bC:'myProperty|myPropertyAlias1|myPropertyAlias2'});var _bB=new _2;function _cl(){_w.push('changed handler 1')}function _cm(){_w.push('changed handler 2')}function _cn(){_w.push('changed handler 3')}_bB.wire('Changed.myProperty',_cl);_bB.wire('Changed.myProperty',_cm);_bB.wire('Changed.myProperty',_cn);_bB.set('myProperty',++_b4);_bB.unwire('Changed.myProperty',_cl);_bB.set('myProperty',++_b4);
_bB.unwire('Changed.myPropertyAlias1',_cm);_bB.set('myProperty',++_b4);_bB.unwire('Changed.myPropertyAlias2',_cn);_bB.set('myProperty',++_b4);return this.expect(['changed handler 1','changed handler 2','changed handler 3','changed handler 2','changed handler 3','changed handler 3'],_w);}},{title:'Test that the canonical name of a set-get property is used for the name of the Changed.[propertyName] event that is fired when the property\'s value is changed, regardless of which alias is used when setting the property\'s value',test:function(){var _2=Uize.subclass(),_w=[],_b4=0;_2.registerProperties({_bC:'myProperty|myPropertyAlias1|myPropertyAlias2'});var _bB=new _2;function _cl(){_w.push('changed handler 1')}function _cm(){_w.push('changed handler 2')}function _cn(){_w.push('changed handler 3')}_bB.wire('Changed.myProperty',_cl);_bB.wire('Changed.myPropertyAlias1',_cm);_bB.wire('Changed.myPropertyAlias2',_cn);_bB.set('myProperty',++_b4);_bB.set('myPropertyAlias1',++_b4);_bB.set('myPropertyAlias2',++_b4);
return this.expect(['changed handler 1','changed handler 2','changed handler 3','changed handler 1','changed handler 2','changed handler 3','changed handler 1','changed handler 2','changed handler 3'],_w);}},{title:'Test that the canonical name of a set-get property is used for the properties-being-set object that is passed as a parameter to an onChange handler for the set-get property',test:function(){var _2=Uize.subclass(),_co=[],_b4=0;_2.registerProperties({_bC:{name:'myProperty|myPropertyAlias1|myPropertyAlias2',onChange:function(_bO){_co.push(_bO);}}});var _bB=new _2;_bB.set('myProperty',++_b4);_bB.set('myPropertyAlias1',++_b4);_bB.set('myPropertyAlias2',++_b4);return this.expect([{myProperty:1},{myProperty:2},{myProperty:3}],_co);}},{title:'Test that the canonical names of set-get properties are used for the properties object that is provided in the event object for Changed.* events',test:function(){var _2=Uize.subclass(),_cp=[],_b4=0;_2.registerProperties({
_bC:'myProperty|myPropertyAlias1|myPropertyAlias2'});var _bB=new _2;_bB.wire('Changed.*',function(_v){_cp.push(_v.properties)});_bB.set('myProperty',++_b4);_bB.set('myPropertyAlias1',++_b4);_bB.set('myPropertyAlias2',++_b4);return this.expect([{myProperty:1},{myProperty:2},{myProperty:3}],_cp);}}]},{title:'Test that values specified for set-get properties when calling a class\' constructor are respected',test:function(){var _2=Uize.subclass();_2.registerProperties({_bD:{name:'myProperty1',value:'myProperty1 initial value'},_bE:{name:'myProperty2',value:'myProperty2 initial value'},_ck:{name:'myProperty3',value:'myProperty3 initial value'}});var _bB=new _2({myProperty1:'myProperty1 new value',_bE:'myProperty2 new value'});return(this.expect('myProperty1 new value',_bB._bD)&&this.expect('myProperty2 new value',_bB._bE)&&this.expect('myProperty3 initial value',_bB._ck));}}]},{title:'Data Module Pattern with Caching Accessor',test:function(){var _j;Uize.module({name:'MyNamespace'});Uize.module({
name:'MyNamespace.EngineeringEmployees',builder:function(){var _cq;return function(_cr){if(_cq&& !_cr)return _cq;var _cs=[{firstName:'John',lastName:'Wilkey',department:'engineering'},{firstName:'Nick',lastName:'Arendsen',department:'engineering'},{firstName:'Mark',lastName:'Strathley',department:'engineering'}];return _cr?_cs:(_cq=_cs);};}});Uize.module({name:'MyNamespace.FinanceEmployees',builder:function(){var _cq;return function(_cr){if(_cq&& !_cr)return _cq;var _cs=[{firstName:'Marie',lastName:'Stevenson',department:'finance'},{firstName:'Craig',lastName:'Pollack',department:'finance'}];return _cr?_cs:(_cq=_cs);};}});Uize.module({name:'MyNamespace.AllEmployees',required:['MyNamespace.EngineeringEmployees','MyNamespace.FinanceEmployees'],builder:function(){var _cq;return function(_cr){if(_cq&& !_cr)return _cq;var _cs=[].concat(MyNamespace.EngineeringEmployees(true),MyNamespace.FinanceEmployees(true));return _cr?_cs:(_cq=_cs);};}});Uize.module({required:'MyNamespace.AllEmployees',builder:function(){
_j=Uize.Data.identical(MyNamespace.AllEmployees(),[{firstName:'John',lastName:'Wilkey',department:'engineering'},{firstName:'Nick',lastName:'Arendsen',department:'engineering'},{firstName:'Mark',lastName:'Strathley',department:'engineering'},{firstName:'Marie',lastName:'Stevenson',department:'finance'},{firstName:'Craig',lastName:'Pollack',department:'finance'}]);}});return _j;}}]});}});