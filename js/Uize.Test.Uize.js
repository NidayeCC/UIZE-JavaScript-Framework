/*
	UIZE JAVASCRIPT FRAMEWORK 2011-07-03

	http://www.uize.com/reference/Uize.Test.Uize.html
	Available under MIT License or GNU General Public License -- http://www.uize.com/license.html
*/
Uize.module({name:'Uize.Test.Uize',required:'Uize.Data',builder:function(){var _a={undefinedValue:undefined,nullValue:null,emptyString:'',nonEmptyString:'solar',numberValueZero:0,numberValueNegative:-1,numberValuePositive:1,numberValueNaN:NaN,numberValueInfinity:Infinity,numberValueNegativeInfinity:-Infinity,booleanFalse:false,booleanTrue:true},_b=[undefined,null,'','solar',0,-1,1,NaN,Infinity,-Infinity,false,true],_c={anObject:_a,anArray:_b},_d=[_a,_b];var _e=Uize.subclass();_e.registerProperties({_f:'value'});function _g(_h,_i,_j){return{title:_h,test:function(){var _k=new _i(_j),_l=Uize.clone(_k);return(this.expect(true,_l!=_k)&&this.expectSameAs(_k.constructor,_l.constructor)&&this.expect(_k.valueOf(),_l.valueOf()));}};}function _m(_h,_n){function _o(){return _n?new Uize:Uize.subclass();}return{title:_h,test:[{title:'Test that firing an event for which no handler is registered has no ill effect',test:function(){_o().fire('testEvent');return true;}},{
title:'Test that firing an event for which a handler is registered works correctly',test:function(){var _p=false,_q=_o();_q.wire('testEvent',function(){_p=true});_q.fire('testEvent');return _p;}},{title:'Test that an event handler function receives a single object parameter, and that this event object contains a name property whose value matches the name of the fired event',test:function(){var _p=false,_q=_o();_q.wire('testEvent',function(_r){_p=arguments.length==1&&typeof _r=='object'&&_r&&_r.name=='testEvent';});_q.fire('testEvent');return _p;}},{title:'Test that the event object provided to an event handler has a source property, whose value is a reference to the object on which the event was fired',test:function(){var _p=false,_q=_o();_q.wire('testEvent',function(_r){_p=_r.source===_q});_q.fire('testEvent');return _p;}},{title:'Test that firing an event for which two handlers are registered results in the handlers being exucuted in the order registered',test:function(){var _s=[],_q=_o();
_q.wire('testEvent',function(){_s.push('handler1')});_q.wire('testEvent',function(){_s.push('handler2')});_q.fire('testEvent');return this.expect('handler1,handler2',_s+'');}},{title:'Test that firing an event for which more than two handlers are registered results in the handlers being exucuted in the order registered',test:function(){var _s=[],_q=_o();_q.wire('testEvent',function(){_s.push('handler1')});_q.wire('testEvent',function(){_s.push('handler2')});_q.wire('testEvent',function(){_s.push('handler3')});_q.wire('testEvent',function(){_s.push('handler4')});_q.fire('testEvent');return this.expect('handler1,handler2,handler3,handler4',_s+'');}},{title:'Test that firing an event using the alternate event object form is handled correctly',test:function(){var _p=false,_q=_o();_q.wire('testEvent',function(){_p=true});_q.fire({name:'testEvent'});return _p;}},{title:'Test that extra event object properties that are specified when firing an event are accessible on the event object in the handler',test:function(){
var _p=false,_q=_o();_q.wire('testEvent',function(_r){_p=_r.foo=='bar'&&_r.hello=='world'});_q.fire({name:'testEvent',foo:'bar',hello:'world'});return _p;}},{title:'Test that the same event object is passed to all handlers for an event and is also returned as the result of the fire method',test:function(){var _q=_o(),_t,_u;_q.wire('testEvent',function(_r){_t=_r;_r.foo='bar';});_q.wire('testEvent',function(_r){_u=_r;_r.hello='world';});var _r=_q.fire('testEvent');return(_r==_t&&_r==_u&&_r.foo=='bar'&&_r.hello=='world');}},{title:'Test that unwiring an event handler results in that handler no longer being executed',test:function(){var _p=false,_q=_o();function _v(){_p= !_p}_q.wire('testEvent',_v);_q.fire('testEvent');_q.unwire('testEvent',_v);_q.fire('testEvent');return _p;}},{title:'Test that the special wildcard event name results in the handler being executed for all events, and that it can be unwired successfully',test:function(){var _w='testEvent1,testEvent2,testEvent3',_x=[],_y=[],_z=[],_q=_o();
function _A(_r){_x.push(_r.name)}function _B(_r){_y.push(_r.name)}function _C(_r){_z.push(_r.name)}_q.wire('*',_A);_q.wire('*',_B);_q.wire('*',_C);_q.fire('testEvent1');_q.fire('testEvent2');_q.fire('testEvent3');_q.unwire('*',_A);_q.unwire('*',_B);_q.unwire('*',_C);_q.fire('testEvent1');_q.fire('testEvent2');_q.fire('testEvent3');return(_x+''==_w&&_y+''==_w&&_z+''==_w);}},{title:'Test that when the second of three event handlers is unwired, the execution order of the remaining two handlers is preserved',test:function(){var _s=[],_q=_o();_q.wire('testEvent',function(){_s.push('handler1')});function _B(){_s.push('handler2')}_q.wire('testEvent',_B);_q.wire('testEvent',function(){_s.push('handler3')});_q.unwire('testEvent',_B);_q.fire('testEvent');return this.expect('handler1,handler3',_s+'');}},{title:'Test that wiring handlers for multiple different events using the event-names-to-handlers map is handled correctly',test:function(){var _D,_E,_F,_q=_o();_q.wire({testEvent1:function(){_D=true},
testEvent2:function(){_E=true},testEvent3:function(){_F=true}});_q.fire('testEvent1');_q.fire('testEvent2');_q.fire('testEvent3');return _D&&_E&&_F;}},{title:'Test that unwiring handlers for multiple different events using the event-names-to-handlers map is handled correctly',test:function(){var _G=false,_H=false,_I=false,_q=_o();function _J(){_q.fire('testEvent1');_q.fire('testEvent2');_q.fire('testEvent3');}var _K={testEvent1:function(){_G= !_G},testEvent2:function(){_H= !_H},testEvent3:function(){_I= !_I}};_q.wire(_K);_J();_q.unwire(_K);_J();return _G&&_H&&_I;}},{title:'Test that not specifying a handler when unwiring an event results in all handlers for that event being unwired',test:function(){var _L=false,_M=false,_N=false,_q=_o();_q.wire('testEvent',function(){_L= !_L});_q.wire('testEvent',function(){_M= !_M});_q.wire('testEvent',function(){_N= !_N});_q.fire('testEvent');_q.unwire('testEvent');_q.fire('testEvent');return _L&&_M&&_N;}},{title:
'Test that unwiring a handler for the special wildcard event results in just that handler being unwired, rather than all handlers for the wildcard event or all handlers for all events',test:function(){var _s=[],_q=_o();function _A(){_s.push('handler1')}_q.wire('*',_A);_q.wire('*',function(){_s.push('handler2')});_q.wire('testEvent',function(){_s.push('handler3')});_q.fire('testEvent');_q.unwire('*',_A);_q.fire('testEvent');return this.expect('handler1,handler2,handler3,handler2,handler3',_s+'');}},_n?{title:'Test that event bubbling works correctly for instances',test:[{title:'Test that setting the bubble event property to true when firing an event on an instance with no parent is not fatal and results in a handler wired for that event being executed',test:function(){var _q=_o(),_p=false;_q.wire('testEvent',function(){_p=true});_q.fire({name:'testEvent',bubble:true});return _p;}},{title:
'Test that setting the bubble event property to true when firing an event on an instance with a parent causes that event to fire first on the instance and then on its parent',test:function(){var _s=[],_q=_o(),_O=_o();_q.parent=_O;_q.wire('testEvent',function(){_s.push('sourceHandler')});_O.wire('testEvent',function(){_s.push('sourceParentHandler')});_q.fire({name:'testEvent',bubble:true});return this.expect('sourceHandler,sourceParentHandler',_s+'');}},{title:'Test that a bubbling event is fired on all instances up the parent chain',test:function(){var _s=[],_q=_o(),_O=_o(),_P=_o(),_w=['sourceHandler','sourceParentHandler','sourceParentParentHandler'];_q.parent=_O;_O.parent=_P;_q.wire('testEvent',function(){_s.push(_w[0])});_O.wire('testEvent',function(){_s.push(_w[1])});_P.wire('testEvent',function(){_s.push(_w[2])});_q.fire({name:'testEvent',bubble:true});return this.expect(_w+'',_s+'');}},{title:
'Test that the event object provided to all handlers of a bubbling event up the parent chain is the same event object',test:function(){var _q=_o(),_O=_o(),_P=_o(),_Q,_R,_S,_T={name:'testEvent',bubble:true};_q.parent=_O;_O.parent=_P;_q.wire('testEvent',function(_r){_Q=_r;_r.foo='bar';});_O.wire('testEvent',function(_r){_R=_r;_r.hello='world';});_P.wire('testEvent',function(_r){_S=_r;_r.duck='typing';});var _r=_q.fire(_T);return(_r==_T&&_Q==_T&&_R==_T&&_S==_T&&_r.foo=='bar'&&_r.hello=='world'&&_r.duck=='typing');}},{title:'Test that a bubbling event can be canceled by a handler of the bubbled event, so that it will not be fired on a higher parent',test:function(){var _s=[],_q=_o(),_O=_o(),_P=_o();_q.parent=_O;_O.parent=_P;_q.wire('testEvent',function(){_s.push('sourceHandler')});_O.wire('testEvent',function(_r){_s.push('sourceParentHandler');_r.bubble=false;});_P.wire('testEvent',function(){_s.push('sourceParentParentHandler')});_q.fire({name:'testEvent',bubble:true});
return this.expect('sourceHandler,sourceParentHandler',_s+'');}},{title:'Test that the event object for a bubbling event always has the instance on which the event was originally fired as the value for the source property',test:function(){var _q=_o(),_O=_o(),_P=_o(),_U,_V,_W;_q.parent=_O;_O.parent=_P;_q.wire('testEvent',function(_r){_U=_r.source});_O.wire('testEvent',function(_r){_V=_r.source});_P.wire('testEvent',function(_r){_W=_r.source});_q.fire({name:'testEvent',bubble:true});return(_U==_q&&_V==_q&&_W==_q);}}]}:{title:'Test that event bubbling is ignored for classes',test:[{title:'Test that setting the bubble event property to true when firing an event on a class with no parent (as it should be) is not fatal and results in a handler wired for that event being executed',test:function(){var _q=_o(),_p=false;_q.wire('testEvent',function(){_p=true});_q.fire({name:'testEvent',bubble:true});return _p;}},{title:
'Test that setting the bubble event property to true when firing an event on a class with a parent (which is not exactly valid) is not fatal and results in a handler wired for that event being executed',test:function(){var _s=[],_q=_o(),_O=_o();_q.parent=_O;_q.wire('testEvent',function(){_s.push('sourceHandler')});_O.wire('testEvent',function(){_s.push('sourceParentHandler')});_q.fire({name:'testEvent',bubble:true});return this.expect('sourceHandler',_s+'');}}]}]};}function _X(_h,_n){return{title:_h,test:[{title:'Test that values can be set for multiple properties by calling the set method with a single argument, which is an object containing an arbitrary number of property name to property value mappings',test:function(){var _Y=Uize.subclass();_Y.registerProperties({_Z:'property1',_0:'property2',_1:'property3'});var _2=_n?new _Y:_Y;_2.set({property1:'property1Value',property2:'property2Value',property3:'property3Value'});return(this.expect('property1Value',_2._Z)&&this.expect('property2Value',_2._0)&&
this.expect('property3Value',_2._1));}},{title:'Test that a value can be set for a single property by calling the set method with two arguments, where the first argument is the property\'s name and the second is the property\'s value',test:function(){var _Y=Uize.subclass();_Y.registerProperties({_Z:'property1'});var _2=_n?new _Y:_Y;_2.set('property1','property1Value');return this.expect('property1Value',_2._Z);}},{title:'Test that values can be set for multiple properties by calling the set method with more than two arguments, where the arguments are property name-value pairs',test:function(){var _Y=Uize.subclass();_Y.registerProperties({_Z:'property1',_0:'property2',_1:'property3'});var _2=_n?new _Y:_Y;_2.set('property1','property1Value','property2','property2Value','property3','property3Value');return(this.expect('property1Value',_2._Z)&&this.expect('property2Value',_2._0)&&this.expect('property3Value',_2._1));}},{
title:'Test that, when a private name for a set-get property is different from its publice name, the set method does not set a value for a property using the public name of the set-get property',test:function(){var _Y=Uize.subclass();_Y.registerProperties({_Z:'property1'});var _2=_n?new _Y:_Y;_2.set('property1','property1Value');return this.expect(undefined,_2.property1);}}]};}function _3(_h,_n){return{title:_h,test:[{title:'Test that the value of a single set-get property can be obtained by calling the get method with a single string argument, specifying the name of the property',test:function(){var _Y=Uize.subclass();_Y.registerProperties({_Z:{name:'property1',value:'property1Value'},_0:{name:'property2',value:'property2Value'}});var _2=_n?new _Y:_Y;return this.expect('property1Value',_2.get('property1'));}},{title:'Test that values can be obtained for multiple properties by calling the get method with a single argument, which is a list of property names',test:function(){var _Y=Uize.subclass();
_Y.registerProperties({_Z:{name:'property1',value:'property1Value'},_0:{name:'property2',value:'property2Value'},_1:{name:'property3',value:'property3Value'}});var _2=_n?new _Y:_Y;return this.expect({property1:'property1Value',property2:'property2Value',property3:'property3Value'},_2.get(['property1','property2','property3']));}},{title:'Test that values can be obtained for all properties by calling the get method with no arguments',test:function(){var _Y=Uize.subclass();_Y.registerProperties({_Z:{name:'property1',value:'property1Value'},_0:{name:'property2',value:'property2Value'},_1:{name:'property3',value:'property3Value'}});var _2=_n?new _Y:_Y;return this.expect({property1:'property1Value',property2:'property2Value',property3:'property3Value'},_2.get());}}]};}return Uize.Test.declare({title:'Test for Uize Base Class',test:[Uize.Test.staticMethodsTest([['Uize.capFirstChar',[['Many letters, first letter is lowercase','hello','Hello'],['Many letters, first letter is uppercase','Hello','Hello'],
['Single letter, lowercase','h','H'],['Single letter, uppercase','H','H'],['Empty string','','']]],['Uize.constrain',[['Test that constraining a value that is lower than the lower limit returns the lower limit',[-20,-10,10],-10],['Test that constraining a value that is equal to the lower limit returns that value',[-10,-10,10],-10],['Test that constraining a value that is higher than the upper limit returns the upper limit',[20,-10,10],10],['Test that constraining a value that is equal to the upper limit returns that value',[10,-10,10],10],['Test that constraining value that is within the range simply returns that value',[1,-10,10],1],['Test that, when the range is reversed, constraining a value that is lower than the lower limit returns the lower limit',[-20,10,-10],-10],['Test that, when the range is reversed, constraining a value that is equal to the lower limit returns that value',[-10,10,-10],-10],
['Test that, when the range is reversed, constraining a value that is higher than the upper limit returns the upper limit',[20,10,-10],10],['Test that, when the range is reversed, constraining a value that is equal to the upper limit returns that value',[10,10,-10],10],['Test that, when the range is reversed, constraining value that is within the range simply returns that value',[1,10,-10],1],['Test that, when the lower limit and the upper limit are equal, constraining a value that is lower than the lower limit returns the lower limit',[5,10,10],10],['Test that, when the lower limit and the upper limit are equal, constraining a value that is higher than the upper limit returns the upper limit',[15,10,10],10]]],['Uize.isArray',[['Test that calling with no parameters returns false',[],false],['Test that the value undefined is not regarded as an array',undefined,false],['Test that the value null is not regarded as an array',null,false],['Test that a string type value is not regarded as an array','hello',false],
['Test that a String object instance is not regarded as an array',new String('hello'),false],['Test that a number type value is not regarded as an array',5,false],['Test that a Number object instance is not regarded as an array',new Number(5),false],['Test that a boolean type value is not regarded as an array',true,false],['Test that a Boolean object instance is not regarded as an array',new Boolean(true),false],['Test that an empty object is not regarded as an array',{},false],['Test that a function is not regarded as an array',function(){},false],['Test that a regular expression instance is not regarded as an array',/\d+/,false],['Test that an empty array is regarded as an array',[[]],true],['Test that an array with elements is regarded as an array',[[1,2,3,4]],true]]],['Uize.isNumber',[['Test that calling with no parameters returns false',[],false],['Test that the value undefined is not regarded as a number',undefined,false],['Test that the value null is not regarded as a number',null,false],
['Test that a number format string type value is not regarded as a number','5',false],['Test that a number format String object instance is not regarded as a number',new String('5'),false],['Test that a boolean type value is not regarded as a number',true,false],['Test that a Boolean object instance is not regarded as a number',new Boolean(true),false],['Test that an object is not regarded as a number',{},false],['Test that an array is not regarded as a number',[[]],false],['Test that a function is not regarded as a number',function(){},false],['Test that a regular expression instance is not regarded as a number',/\d+/,false],['Test that a number type value is regarded as a number',5,true],['Test that the special value Infinity is regarded as a number',Infinity,true],['Test that the special value -Infinity is regarded as a number',-Infinity,true],['Test that the special value NaN is not regarded as a number',NaN,false],['Test that a Number object instance is not regarded as a number',new Number(5),false]]],
['Uize.escapeRegExpLiteral',[['Test that all of the regular expression special characters are escaped correctly','^$|{}[]()?.*+\\','\\^\\$\\|\\{\\}\\[\\]\\(\\)\\?\\.\\*\\+\\\\']]],['Uize.copyInto',[['Test that calling with only a target object and no source object results in the target object being returned unchanged',{foo:'bar',hello:'world'},{foo:'bar',hello:'world'}],['Test that specifying the value null for the source object results in the target object being returned unchanged',[{foo:'bar',hello:'world'},null],{foo:'bar',hello:'world'}],['Test that specifying the value undefined for the source object results in the target object being returned unchanged',[{foo:'bar',hello:'world'},undefined],{foo:'bar',hello:'world'}],['Test that copying a source object into a target object works correctly',[{foo:'foo',hello:'there',otherInTarget:'blah'},{foo:'bar',hello:'world',otherInSource:'yawn'}],{foo:'bar',hello:'world',otherInTarget:'blah',otherInSource:'yawn'}],{
title:'Test that the target object is returned and not a new object',test:function(){var _4={foo:'bar'};var _5=Uize.copyInto(_4,{hello:'world'});return this.expectSameAs(_4,_5);}},['Test that an arbitrary number of source objects is supported',[{propFromTarget:'foo'},{propFromSource1:'bar'},{propFromSource2:'hello'},{propFromSource3:'world'}],{propFromTarget:'foo',propFromSource1:'bar',propFromSource2:'hello',propFromSource3:'world'}],['Test that the contents of source objects are copied into the target in the order in which the source objects are specified',[{foo:'foo',otherInTarget:'blah'},{foo:'bar',fancy:'pants'},{fancy:'schmancy',la:'dee dah'},{la:'dolce vita',fin:'ished'}],{foo:'bar',otherInTarget:'blah',fancy:'schmancy',la:'dolce vita',fin:'ished'}],['Test that specifying the value null or undefined for all of the source objects results in the target object being returned unchanged',[{foo:'bar',hello:'world'},null,undefined,undefined,null],{foo:'bar',hello:'world'}],
['Test that specifying the value null for the target object results in the value null being returned',[null,{foo:'bar',hello:'world'}],null],['Test that specifying the value undefined for the target object results in the value null being returned',[undefined,{foo:'bar',hello:'world'}],undefined]],null,{cloneArguments:true}],['Uize.pairUp',[['Test that calling with no parameters returns {undefined:undefined}',[],{undefined:undefined}],['Test that undefined is the default for the valueANYTYPE parameter',['key'],{key:undefined}],['Test that the key can be a string','key',{key:undefined}],['Test that the key can be a number',5,{5:undefined}],['Test that the key can be the special value Infinity',Infinity,{Infinity:undefined}],['Test that the key can be the special value NaN',NaN,{NaN:undefined}],['Test that the key can be a boolean',false,{'false':undefined}],['Test that the key can be undefined',undefined,{undefined:undefined}],['Test that the key can be null',null,{'null':undefined}],
['Test that the value can be a string',['key','value'],{key:'value'}],['Test that the value can be a number',['key',5],{key:5}],['Test that the value can be the special value Infinity',['key',Infinity],{key:Infinity}],['Test that the value can be the special value NaN',['key',NaN],{key:NaN}],['Test that the value can be a boolean',['key',false],{key:false}],['Test that the value can be undefined',['key',undefined],{key:undefined}],['Test that the value can be null',['key',null],{key:null}],['Test that the value can be an object',['key',{propName:'propValue'}],{key:{propName:'propValue'}}],['Test that an arbitrary number of arguments is supported',['string','foo','number',42,'boolean',false,'regexp',/\d+/,'undefined',undefined,'null',null,'NaN',NaN,'object',{},'array',[]],{'string':'foo','number':42,'boolean':false,'regexp':/\d+/,'undefined':undefined,'null':null,'NaN':NaN,'object':{},'array':[]}],
['Test that if there is only one argument whose value is an array, then that array is treated as the arguments list',[['string','foo','number',42,'boolean',false,'regexp',/\d+/,'undefined',undefined,'null',null,'NaN',NaN,'object',{},'array',[]]],{'string':'foo','number':42,'boolean':false,'regexp':/\d+/,'undefined':undefined,'null':null,'NaN':NaN,'object':{},'array':[]}]]],['Uize.substituteInto',[['Test that calling with no parameters produces an empty string',[],''],['Test that calling with just a source string simply produces that string','Hello, world!','Hello, world!'],['Test that specifying the value null for substitutions produces the source string',['Hello, world!',null,'[#KEY]'],'Hello, world!'],['Test that specifying the value undefined for substitutions produces the source string',['Hello, world!',undefined,'[#KEY]'],'Hello, world!'],['Test that substituting into an empty string produces an empty string',['',{name:'Eric'},'[#KEY]'],''],['Test that substitution of a single token works correctly',
['My name is [#name].',{name:'Eric'},'[#KEY]'],'My name is Eric.'],['Test that multiple substitutions are handled corretly',['My name is [#name], and I am a [#occupation].',{name:'Eric',occupation:'viking'},'[#KEY]'],'My name is Eric, and I am a viking.'],['Test that a custom token naming specifier is handled correctly',['My name is <%name%>, and I am a <%occupation%>.',{name:'Eric',occupation:'viking'},'<%KEY%>'],'My name is Eric, and I am a viking.'],['Test that token naming where token opener and closer are empty strings is handled correcly',['I am name, and I am a occupation.',{name:'Eric',occupation:'viking'},'KEY'],'I am Eric, and I am a viking.'],['Test that default for token naming is [#KEY]',['My name is [#name].',{name:'Eric'}],'My name is Eric.'],['Test that specifying an empty object for substitutions simply produces the source string',['Hello, world!',{}],'Hello, world!'],['Test that the same substitution can be used multiple times',
['My name is [#name]. [#name] is my name. You can call me [#name].',{name:'Eric'}],'My name is Eric. Eric is my name. You can call me Eric.'],['Test that substitution values that contain tokens are not further substituted into',['[#token1][#token2]',{token1:'[#token2]foo',token2:'bar'}],'[#token2]foobar'],['Test that tokens in the source string for which there aren\'t substitutions are left in the source string',['My name is [#name].',{occupation:'viking'}],'My name is [#name].'],['Test that substitutions for which there aren\'t tokens in the source string are ignored',['My name is [#name].',{name:'Eric',occupation:'viking'}],'My name is Eric.'],['Test that specifying an array for substitutions is handled correctly',['My name is [#0], and I am a [#1].',['Eric','viking']],'My name is Eric, and I am a viking.'],['Test that specifying an empty array for substitutions simply produces the source string',['Hello, world!',[]],'Hello, world!'],
['Test that non-string substitution values are correctly coerced to strings',['[#int] [#neg] [#float] [#nan] [#infinity] [#true] [#false] [#obj] [#null] [#undefined]',{int:5,neg:-5,float:5.5,nan:NaN,infinity:Infinity,'true':true,'false':false,obj:new _e({value:'OBJECT'}),'null':null,'undefined':undefined}],'5 -5 5.5 NaN Infinity true false OBJECT null undefined'],['Test that a string type substitution is treated as a substitutions array with one element',['My name is [#0].','Eric'],'My name is Eric.'],['Test that a number type substitution is treated as a substitutions array with one element',['Pi is approximately [#0].',3.14159265359],'Pi is approximately 3.14159265359.'],['Test that a boolean type substitution is treated as a substitutions array with one element',['It is not [#0] that the Earth is flat.',true],'It is not true that the Earth is flat.'],['Test that substitution keys are case-sensitive, as designed',['My name is [#name], and not [#NAME]!',{name:'Eric',NAME:'Derrick'}],
'My name is Eric, and not Derrick!'],['Test that substitution keys are space-sensitive, as designed',['My name is [#name], and not [# name ]!',{name:'Eric',' name ':'Derrick'}],'My name is Eric, and not Derrick!'],['Test that spaces in the token opener and token closer are significant, as designed',['[name] [ name] [name ] [ name ]',{name:'Eric'},'[ KEY ]'],'[name] [ name] [name ] Eric'],['Test that a token opener containing regular expression special characters is handled correctly',['My name is [^$|{}[]()?.*+\\name].',{name:'Eric'},'[^$|{}[]()?.*+\\KEY]'],'My name is Eric.'],['Test that a token closer containing regular expression special characters is handled correctly',['My name is [name^$|{}[]()?.*+\\].',{name:'Eric'},'[KEY^$|{}[]()?.*+\\]'],'My name is Eric.'],['Test that a substitution key containing regular expression special characters is handled correctly',['My name is [^$|{}[]()?.*+\\].',{'^$|{}[]()?.*+\\':'Eric'},'[KEY]'],'My name is Eric.'],
['Test that the source for substituting into can be a number',[3.14159265359,{'.':','},'KEY'],'3,14159265359'],['Test that the source for substituting into can be a boolean',[true,{ru:'Russia'},'KEY'],'tRussiae'],['Test that the source for substituting into can be an object that implements a value interface',[new _e({value:'My name is [#name].'}),{name:'Eric'}],'My name is Eric.'],['Test that the source for substituting into can be an array, whose elements will be concatenated',[['[#name]','[#occupation]'],{name:'Eric',occupation:'viking'}],'Eric,viking']]],['Uize.indexIn',[['Test that calling with no parameters produces the result -1',[],-1],['Test that specifying null for the sourceARRAY parameter produces the result -1',[null,null],-1],['Test that specifying undefined for the sourceARRAY parameter produces the result -1',[undefined,undefined],-1],['Test that specifying a number for the sourceARRAY parameter produces the result -1',[5,5],-1],
['Test that specifying a string for the sourceARRAY parameter produces the result -1',['hello','hello'],-1],['Test that specifying a boolean for the sourceARRAY parameter produces the result -1',[true,true],-1],['Test that specifying an empty array for the sourceARRAY parameter produces the result -1',[[],1],-1],['Test that the fromEndBOOL and strictEqualityBOOL parameters are observed correctly',[[0,1,'1','1',1,2],'1',true,false],4],['Test that the strictEqualityBOOL parameter is defaulted to true, as designed',[[0,1,'1','1',1,2],'1',true],3],['Test that the fromEndBOOL parameter is defaulted to false, as designed',[[0,1,'1','1',1,2],'1'],2],['Test that -1 is returned when the value is not found in the source array',[[0,1,'1','1',1,2],'0'],-1]]],['Uize.isIn',[['Test that calling with no parameters produces the result false',[],false],['Test that specifying null for the sourceARRAY parameter produces the result false',[null,null],false],
['Test that specifying undefined for the sourceARRAY parameter produces the result false',[undefined,undefined],false],['Test that specifying a number for the sourceARRAY parameter produces the result false',[5,5],false],['Test that specifying a string for the sourceARRAY parameter produces the result false',['hello','hello'],false],['Test that specifying a boolean for the sourceARRAY parameter produces the result false',[true,true],false],['Test that specifying an empty array for the sourceARRAY parameter produces the result false',[[],1],false],['Test that the strictEqualityBOOL parameter ia observed correctly',[[0,1],'1',false],true],['Test that the strictEqualityBOOL parameter is defaulted to true, as designed',[[0,1],'1'],false],['Test that false is returned when the value is not found in the source array',[[0,1],2],false]]],['Uize.recordMatches',[['Test that specifying the value null for the record produces the result false',[null,{foo:'bar'}],false],
['Test that specifying the value undefined for the record produces the result false',[undefined,{foo:'bar'}],false],['Test that specifying the value null for the match object produces the result true',[{foo:'bar'},null],true],['Test that specifying the value undefined for the match object produces the result true',[{foo:'bar'},undefined],true],['Test that specifying an empty match object produces the result true',[{foo:'bar'},{}],true],['Test that specifying a match object that contains properties that aren\'t in the record produces the result false',[{foo:'bar'},{hello:'world'}],false],['Test that specifying a match object with a property that is in the record but whose value is not the same produces the result false',[{meaningOfLife:42},{meaningOfLife:'dunno'}],false],['Test that specifying a match object with a property that is in the record and whose values is equal but not in a strict equality produces the result false',[{meaningOfLife:42},{meaningOfLife:'42'}],false],
['Test that specifying a match object with a property that is in the record and whose values is equal in a strict equality produces the result true',[{meaningOfLife:42},{meaningOfLife:42}],true],['Test that specifying a match object with multiple properties and that is only a partial match with the record produces the result false',[{foo:'bar',hello:'world',meaningOfLife:42},{foo:'bar',hello:'there',meaningOfLife:42}],false],['Test that specifying a match object with multiple properties and that is a complete match with the record produces the result true',[{foo:'bar',hello:'world',meaningOfLife:42},{foo:'bar',hello:'world',meaningOfLife:42}],true],['Test that properties that are in the record but that are not in the match object are not considered and do not affect the success of the match',[{foo:'bar',hello:'world',meaningOfLife:42},{meaningOfLife:42}],true]]],['Uize.findRecordNo',[['Test that specifying null for the records results in the default number being returned',[null,{},5],5],
['Test that specifying undefined for the records results in the default number being returned',[undefined,{},5],5],['Test that not specifying a default number results in the value -1 being used for default number',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'}],-1],['Test that specifying the value null for default number is treated as a default number of -1',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},null],-1],['Test that specifying the value undefined for default number is treated as a default number of -1',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},undefined],-1],['Test that specifying a string value for detault number results in it being coerced to a number',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},'5'],5],['Test that specifying a boolean value for the default number results in it being coerced to a number',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},true],1],['Test that specifying an object value for the default number results in it being coerced to a number',
[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},new _e({value:5})],5],['Test that specifying an object value for the default number that cannot be coerced to a number results in the value -1 being used for the default number',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},new _e({value:'blah'})],-1],['Test that the index of the first matching record is returned when the match matches a record',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'bar'}],1],['Test that the value 0 is returned when the value null is specified for the match',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],null],0]]],['Uize.findRecord',[['Test that specifying null for the records results in the value null being returned',[null,{},5],null],['Test that specifying undefined for the records results in the value null being returned',[undefined,{},5],null],{title:'Test that the first matching record is returned when the match matches a record',test:function(){var _6=[{foo:'boo'},{foo:'bar'},{foo:'foo'}];
return this.expectSameAs(_6[1],Uize.findRecord(_6,{foo:'bar'}));}},{title:'Test that the first record is returned when the value null is specified for the match',test:function(){var _6=[{foo:'boo'},{foo:'bar'},{foo:'foo'}];return this.expectSameAs(_6[0],Uize.findRecord(_6,null));}},{title:'Test that the record for the specified default record number is returned when no matching record is found',test:function(){var _6=[{foo:'boo'},{foo:'bar'},{foo:'foo'}];return this.expectSameAs(_6[2],Uize.findRecord(_6,{foo:'woo'},2));}}]],['Uize.getGuid',[{title:'Test that a string type value is returned, as expected',test:function(){return this.expectNonEmptyString(Uize.getGuid())}},{title:'Test that result is different across ten successive calls',test:function(){var _7=[];for(var _8= -1;++_8<10;)_7.push(Uize.getGuid());return this.expectNoRepeats(_7);}}]],['Uize.getPathToLibrary',[]],['Uize.globalEval',[]],['Uize.isInstance',[['Test that calling with no parameters produces the result false',[],false],
['Test that null is not regarded as a Uize subclass instance',null,false],['Test that undefined is not regarded as a Uize subclass instance',undefined,false],['Test that a string is not regarded as a Uize subclass instance','hello',false],['Test that a number is not regarded as a Uize subclass instance',5,false],['Test that a boolean is not regarded as a Uize subclass instance',true,false],['Test that a simple object is not regarded as a Uize subclass instance',{},false],['Test that an array is not regarded as a Uize subclass instance',[],false],['Test that a regular expression is not regarded as a Uize subclass instance',/\d+/,false],['Test that a function is not regarded as a Uize subclass instance',function(){},false],['Test that a Uize class is not regarded as a Uize subclass instance',Uize,false],['Test that a Uize package is not regarded as a Uize subclass instance',Uize.Data,false],['Test that a Uize instance is correctly regarded as a Uize subclass instance',new Uize,true]]],['Uize.clone',[
['Test that cloning the value null produces the value null',null,null],['Test that cloning the value undefined produces the value undefined',undefined,undefined],['Test that cloning an empty string produces an empty string','',''],['Test that cloning a non-empty string is handled correctly','solar','solar'],['Test that cloning the value 0 produces the value 0',0,0],['Test that cloning a negative number is handled correctly',-1,-1],['Test that cloning a positive number is handled correctly',1,1],['Test that cloning the special number value NaN is handled correctly',NaN,NaN],['Test that cloning the special number value Infinity is handled correctly',Infinity,Infinity],['Test that cloning the special number value -Infinity is handled correctly',-Infinity,-Infinity],['Test that cloning the boolean value false produces the value false',false,false],['Test that cloning the boolean value true produces the value true',true,true],_g('Test that cloning an instance of the RegExp object is handled correctly',RegExp,
new RegExp('^\\s+$','gi')),_g('Test that cloning an instance of the Date object is handled correctly',Date,'2001/9/11'),_g('Test that cloning an instance of the String object is handled correctly',String,'solar'),_g('Test that cloning an instance of the Number object is handled correctly',Number,42),_g('Test that cloning an instance of the Boolean object is handled correctly',Boolean,true),['Test that cloning an empty object produces an empty object',{},{}],_g('Test that the clone of an object is not a reference to that object, but is a new object',Object,{}),['Test that cloning a non-empty object produces an identical copy of that object',_a,_a],['Test that cloning an empty array produces an empty array',[[]],[]],_g('Test that the clone of an array is not a reference to that array, but is a new array',Array,[]),['Test that cloning a non-empty array produces an identical copy of that array',[_b],_b],['Test that cloning a complex object data structure is handled correctly',[_c],_c],
['Test that cloning a complex array data structure is handled correctly',[_d],_d],{title:'Test that cloning a function simply returns a reference to that function',test:function(){var _9=function(){};return this.expectSameAs(_9,Uize.clone(_9))}},{title:'Test that cloning a Uize class instance simply returns a reference to that instance',test:function(){var _9=new Uize;return this.expectSameAs(_9,Uize.clone(_9))}},['Test that specifying no parameter is equivalent to cloning the value undefined',[],undefined]]],['Uize.callOn',[{title:'Test that specifying null for the object results in no action',test:function(){var success=true;Uize.callOn(null,function(){success=false});return success;}},{title:'Test that specifying undefined for the object results in no action',test:function(){var success=true;Uize.callOn(undefined,function(){success=false});return success;}},{title:'Test that specifying a value for method that is neither a string nor a function results in no error being produced',test:function(){
var _4=new Uize;Uize.callOn(_4);Uize.callOn(_4,null);Uize.callOn(_4,undefined);Uize.callOn(_4,42);Uize.callOn(_4,true);Uize.callOn(_4,{});Uize.callOn(_4,[]);return true;}},{title:'Test that specifying a function as the method and an instance as the target results in the function being called as an instance method on the instance',test:function(){var _4=new Uize,_p=false;Uize.callOn(_4,function(){_p=this==_4});return _p;}},{title:'Test that when the optional arguments parameter is not specified, the arguments are defaulted to an empty array',test:function(){var _4=new Uize,_p=false;Uize.callOn(_4,function(){_p=arguments.length==0});return _p;}},{title:'Test that when the optional arguments parameter is specified, those arguments are passed in the call correctly',test:function(){var _4=new Uize,_p=false;Uize.callOn(_4,function(){_p=arguments.length==3&&arguments[0]==='foo'&&arguments[1]===42&&arguments[2]===true;},['foo',42,true]);return _p;}},{title:
'Test that specifying the target as an instance and the method as a string does not result in an error being produced when the method is not defined on the instance',test:function(){var _4=new Uize,_ba='SOME-BOGUS-METHOD-NAME';delete _4[_ba];Uize.callOn(_4,_ba);return true;}},{title:'Test that specifying the target as an instance and the method as a string results in the specified method being called as an instance method on the instance',test:function(){var _4=new Uize,_p=false;_4.someSillyMethodName=function(){_p=this==_4&&arguments.length==3&&arguments[0]==='foo'&&arguments[1]===42&&arguments[2]===true;};Uize.callOn(_4,'someSillyMethodName',['foo',42,true]);return true;}},{title:'Test that specifying an array as the target results in the method being called correctly on all elements of the array',test:function(){var _bb=[],_bc=Uize.subclass(),_bd=['foo',42,true],_be=new _bc({name:'subTarget0'}),_bf=new _bc({name:'subTarget1'}),_bg=new _bc({name:'subTarget2'}),_4=[_be,_bf,_bg];Uize.callOn(_4,function(){
_bb.push({_bh:this.get('name'),_bi:[].concat.apply([],arguments)});},_bd);return this.expect([{_bh:'subTarget0',_bi:_bd},{_bh:'subTarget1',_bi:_bd},{_bh:'subTarget2',_bi:_bd}],_bb);}},{title:'Test that specifying an object as the target results in the method being called correctly on all property values of the object',test:function(){var _bb=[],_bc=Uize.subclass(),_bd=['foo',42,true],_be=new _bc({name:'subTarget0'}),_bf=new _bc({name:'subTarget1'}),_bg=new _bc({name:'subTarget2'}),_4={foo:_be,bar:_bf,helloworld:_bg};Uize.callOn(_4,function(){_bb.push({_bh:this.get('name'),_bi:[].concat.apply([],arguments)});},_bd);return this.expect([{_bh:'subTarget0',_bi:_bd},{_bh:'subTarget1',_bi:_bd},{_bh:'subTarget2',_bi:_bd}],_bb);}},{title:'Test that recursion is handled correctly when the target is a complex data structure',test:function(){var _bj=[],_bk=[],_bc=Uize.subclass(),_bd=['foo',42,true],_bl= -1;function _bm(){var _bn='subTarget'+ ++_bl;_bj.push({_bh:_bn,_bi:_bd});return new _bc({name:_bn});}var _4={foo:_bm(),
bar:[_bm(),{hello:_bm(),there:{silly:_bm(),sausage:_bm()},world:_bm()},[_bm(),_bm()]],blah:_bm()};Uize.callOn(_4,function(){_bk.push({_bh:this.get('name'),_bi:[].concat.apply([],arguments)});},_bd);return this.expect(_bj,_bk);}}]],['Uize.fire',[]],['Uize.wire',[]],['Uize.unwire',[]],['Uize.registerProperties',[]],['Uize.get',[]],['Uize.set',[]],['Uize.toggle',[]],['Uize.toString',[]],['Uize.valueOf',[]],['Uize.module',[]],['Uize.subclass',[]]]),{title:'Test the event system for instances and classes',test:[_m('Test that the event system works for instances',true),_m('Test that the event system works for classes',false)]},{title:'Test the set-get properties system',test:[{title:'Test registering set-get properties',test:[]},{title:'Test setting values for set-get properties for instances and classes',test:[_X('Test that the set method works for instances',true),_X('Test that the set method works for classes',false)]},{title:'Test getting values for set-get properties for instances and classes',test:[
_3('Test that the get method works for instances',true),_3('Test that the get method works for classes',false)]},{title:'Test the initial value facility',test:[{title:'Test that when no initial value is specified for a set-get property, the property\'s initial value is undefined',test:function(){var _Y=Uize.subclass();_Y.registerProperties({_bo:{name:'myProperty'}});var _bp=new _Y;return this.expect(undefined,_bp.get('myProperty'));}},{title:'Test that specifying a value property in a set-get property\'s profile when registering it has the effect of setting the initial value for that property for new instances that are created',test:function(){var _Y=Uize.subclass();_Y.registerProperties({_bo:{name:'myProperty',value:'initial value'}});var _bp=new _Y;return this.expect('initial value',_bp.get('myProperty'));}},{title:'Test that null is supported as an initial value for a set-get property and that it is not treated the same as undefined',test:function(){var _Y=Uize.subclass();_Y.registerProperties({_bo:{
name:'myProperty',value:null}});var _bp=new _Y;return this.expect(null,_bp.get('myProperty'));}},{title:'Test that the initial value registered for a property is returned as the result when querying the value of that set-get property on the class',test:function(){var _Y=Uize.subclass();_Y.registerProperties({_bo:{name:'myProperty',value:'initial value'}});return this.expect('initial value',_Y.get('myProperty'));}},{title:'Test that setting the value for a set-get property on the class has the effect of setting the initial value for the property',test:function(){var _Y=Uize.subclass();_Y.registerProperties({_bo:{name:'myProperty'}});_Y.set({myProperty:'initial value'});var _bp=new _Y;return this.expect('initial value',_bp.get('myProperty'));}},{title:'Test that setting the value for a set-get property on the class does not affect the value of the property for instances that have already been created',test:function(){var _Y=Uize.subclass();_Y.registerProperties({_bo:{name:'myProperty',value:'initial value'}});
var _bp=new _Y;_Y.set({myProperty:'new initial value'});return this.expect('initial value',_bp.get('myProperty'));}}]},{title:'Test the onChange handlers mechanism',test:[{title:'Test that an onChange handler for a set-get property is executed on the very first change of the value of that property that occurs during construction of the instance',test:function(){var _Y=Uize.subclass(),_bq=0;_Y.registerProperties({_bo:{name:'myProperty',value:'initial value',onChange:function(){_bq++}}});var _bp=new _Y;return this.expect(1,_bq);}},{title:'Test that an onChange handler for a set-get property is only executed once upon construction when a value specified for the property in the constructor differs from the property\'s initial value',test:function(){var _Y=Uize.subclass(),_bq=0;_Y.registerProperties({_bo:{name:'myProperty',value:'initial value',onChange:function(){_bq++}}});var _bp=new _Y({myProperty:'new value'});return this.expect(1,_bq);}},{
title:'Test that an onChange handler is only executed when the value of a set-get property has actually changed as a result of a set - not on non-changing sets',test:function(){var _Y=Uize.subclass(),_br=0;_Y.registerProperties({_bo:{name:'myProperty',value:'initial value',onChange:function(){_br++}}});var _bp=new _Y;_bp.set({myProperty:'initial value'});_bp.set({myProperty:'new value'});_bp.set({myProperty:'new value'});return this.expect(2,_br);}},{title:'Test that an onChange handler is called as a method on the instance that owns the set-get property',test:function(){var _Y=Uize.subclass(),_bs;_Y.registerProperties({_bo:{name:'myProperty',value:'initial value',onChange:function(){_bs=this}}});var _bp=new _Y;return this.expect(_bp,_bs);}},{title:'Test that the value of the set-get property has already changed by the time that an onChange handler is called',test:function(){var _Y=Uize.subclass(),_bt;_Y.registerProperties({_bo:{name:'myProperty',value:'initial value',onChange:function(){
_bt=this.get('myProperty');}}});var _bp=new _Y;_bp.set({myProperty:'new value'});return this.expect('new value',_bt);}},{title:'Test that an onChange handler can be specified by a string, where that string specifies the name of a method that must be defined for the instance',test:function(){var _Y=Uize.subclass(),_br=0;_Y.prototype.someMethod=function(){_br++};_Y.registerProperties({_bo:{name:'myProperty',value:'initial value',onChange:'someMethod'}});var _bp=new _Y;_bp.set({myProperty:'new value'});return this.expect(2,_br);}},{title:'Test that an array of multiple onChange handlers can be specified for a set-get property, and that all of them are executed, in the order in which they appear in the array',test:function(){var _Y=Uize.subclass(),_s=[];_Y.registerProperties({_bo:{name:'myProperty',value:'initial value',onChange:[function(){_s.push('onChangeHandler1')},function(){_s.push('onChangeHandler2')},function(){_s.push('onChangeHandler3')}]}});var _bp=new _Y;return this.expect(
'onChangeHandler1,onChangeHandler2,onChangeHandler3',_s+'');}},{title:'Test that an array of multiple onChange handlers may contain a mix of handlers specified by function reference, handlers specified by method name, and nested lists of handlers',test:function(){var _Y=Uize.subclass(),_s=[];_Y.prototype.someMethod1=function(){_s.push('onChangeHandlerSpecifiedByString1');};_Y.prototype.someMethod2=function(){_s.push('onChangeHandlerSpecifiedByString2');};_Y.registerProperties({_bo:{name:'myProperty',value:'initial value',onChange:[function(){_s.push('onChangeSpecifiedByFunction1')},function(){_s.push('onChangeSpecifiedByFunction2')},function(){_s.push('onChangeSpecifiedByFunction3')},'someMethod1',[function(){_s.push('onChangeSpecifiedByFunction4')},'someMethod2',function(){_s.push('onChangeSpecifiedByFunction5')}]]}});var _bp=new _Y;return this.expect(['onChangeSpecifiedByFunction1','onChangeSpecifiedByFunction2','onChangeSpecifiedByFunction3','onChangeHandlerSpecifiedByString1',
'onChangeSpecifiedByFunction4','onChangeHandlerSpecifiedByString2','onChangeSpecifiedByFunction5'],_s);}},{title:'Test that all onChange handlers receive a single argument when it is called, which is an object containing the conformed values for all properties being set (not just those that have changed value)',test:function(){var _Y=Uize.subclass(),_bu,_bv,_bw,_bx={foo:'the value of foo',bar:'the new value of bar',myProperty:'new value'};function _by(arguments){var _5=[];_5.push.apply(_5,arguments);return _5;}_Y.registerProperties({_bz:{name:'foo',value:'the value of foo'},bar:{name:'bar',value:'the value of bar',onChange:function(){_bu=_by(arguments);}},helloWorld:{name:'helloWorld',value:'Hello, world!'},_bo:{name:'myProperty',value:'initial value',onChange:[function(){_bv=_by(arguments);},function(){_bw=_by(arguments);}]}});var _bp=new _Y;_bp.set(_bx);return(this.expect([_bx],_bu)&&this.expect([_bx],_bv)&&this.expect([_bx],_bw));}},{
title:'Test that onChange handlers are called for all set-get properties that have changed value in the course of the same set call',test:function(){var _Y=Uize.subclass(),_bA,_bB,_bC,_s=[];_Y.registerProperties({_bz:{name:'foo',value:'the value of foo'},bar:{name:'bar',value:'the value of bar',onChange:function(){_bA++}},helloWorld:{name:'helloWorld',value:'Hello, world!',onChange:function(){_bB++}},_bo:{name:'myProperty',value:'initial value',onChange:function(){_bC++}}});var _bp=new _Y;_bA=_bB=_bC=0;_bp.set({foo:'new value of foo',bar:'the new value of bar',helloWorld:'Hello, world!',myProperty:'new value of myProperty'});return(this.expect(1,_bA)&&this.expect(0,_bB)&&this.expect(1,_bC));}},{title:'Test that an onChange handler is not called for any instances of a class when the value of the set-get property is set on the class',test:function(){var _Y=Uize.subclass(),_br=0;_Y.registerProperties({_bo:{name:'myProperty',value:'initial value',onChange:function(){_br++}}});var _bD=new _Y,_bE=new _Y,_bF=new _Y,
_bG=_br;;_br=0;_Y.set({myProperty:'new initial value'});return _bG==3&&_br==0;}},{title:'Test that a set-get property\'s onChange handler is only called for an instance of the class whose value for the property has changed (ie. no contamination across instances)',test:function(){var _Y=Uize.subclass(),_s=[];_Y.registerProperties({_bh:'name',_bo:{name:'myProperty',value:'initial value',onChange:function(){_s.push(this.get('name'))}}});var _bD=new _Y({name:'instance1'}),_bE=new _Y({name:'instance2'}),_bF=new _Y({name:'instance3'});_s=[];_bE.set({myProperty:'new value'});return this.expect(['instance2'],_s);}},{title:'Test that an onChange handler is only executed if the value of a set-get property has changed after being conformed, and not just if the pre-conformed value is different from the current value',test:function(){var _Y=Uize.subclass(),_bH=[];_Y.registerProperties({_bh:'name',_bo:{name:'myProperty',value:0,conformer:function(_f){return Math.max(Math.min(_f,100),0);},onChange:function(){
_bH.push(this.get('myProperty'));}}});var _bp=new _Y;_bp.set({myProperty:-10});_bp.set({myProperty:10});_bp.set({myProperty:10});_bp.set({myProperty:100});_bp.set({myProperty:200});_bp.set({myProperty:-200});_bp.set({myProperty:0});return this.expect([0,10,100,0],_bH);}},{title:'Test that when the same onChange handler is registered for multiple set-get properties, it is only executed once - even if the values of all those properties change during a set',test:function(){var _Y=Uize.subclass(),_bI=0,_bJ=0;_Y.prototype.someMethod=function(){_bI++};function _bK(){_bJ++};_Y.registerProperties({_bL:{name:'myProperty1',value:'initial value',onChange:['someMethod',_bK]},_bM:{name:'myProperty2',value:'initial value',onChange:['someMethod',_bK]},_bN:{name:'myProperty3',value:'initial value',onChange:['someMethod',_bK]}});var _bp=new _Y;_bp.set({myProperty1:'new value',myProperty2:'new value',myProperty3:'new value'});return(this.expect(2,_bI)&&this.expect(2,_bJ));}}]},{title:'Test the conformer mechanism',test:[]},{
title:'Test the Changed.[propertyName] event mechanism',test:[]},{title:'Test the alias mechanism',test:[]},{title:'Test the special value set-get property',test:[]}]},{title:'Data Module Pattern with Caching Accessor',test:function(){var _5;Uize.module({name:'MyNamespace'});Uize.module({name:'MyNamespace.EngineeringEmployees',builder:function(){var _bO;return function(_bP){if(_bO&& !_bP)return _bO;var _bQ=[{firstName:'John',lastName:'Wilkey',department:'engineering'},{firstName:'Nick',lastName:'Arendsen',department:'engineering'},{firstName:'Mark',lastName:'Strathley',department:'engineering'}];return _bP?_bQ:(_bO=_bQ);};}});Uize.module({name:'MyNamespace.FinanceEmployees',builder:function(){var _bO;return function(_bP){if(_bO&& !_bP)return _bO;var _bQ=[{firstName:'Marie',lastName:'Stevenson',department:'finance'},{firstName:'Craig',lastName:'Pollack',department:'finance'}];return _bP?_bQ:(_bO=_bQ);};}});Uize.module({name:'MyNamespace.AllEmployees',required:['MyNamespace.EngineeringEmployees',
'MyNamespace.FinanceEmployees'],builder:function(){var _bO;return function(_bP){if(_bO&& !_bP)return _bO;var _bQ=[].concat(MyNamespace.EngineeringEmployees(true),MyNamespace.FinanceEmployees(true));return _bP?_bQ:(_bO=_bQ);};}});Uize.module({required:'MyNamespace.AllEmployees',builder:function(){_5=Uize.Data.identical(MyNamespace.AllEmployees(),[{firstName:'John',lastName:'Wilkey',department:'engineering'},{firstName:'Nick',lastName:'Arendsen',department:'engineering'},{firstName:'Mark',lastName:'Strathley',department:'engineering'},{firstName:'Marie',lastName:'Stevenson',department:'finance'},{firstName:'Craig',lastName:'Pollack',department:'finance'}]);}});return _5;}}]});}});