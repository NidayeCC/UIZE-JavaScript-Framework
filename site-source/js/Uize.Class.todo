This is a TO DO document for the =Uize.Class= module.

Mixins
	Add support for mix-ins.

	The mixin Feature Declaration Method
		The =MyClass.mixin= feature declaration method allows one to specify one or more mixins that should be applied to the class.

		EXAMPLE
		.............................
		_class.mixin (Uize.Web.Mixin);
		.............................

		Declaring Mixins During Subclassing
			As with any of the feature declaration methods, the features can also be declared in the features object when calling the =MyClass.subclass= static method to create a new subclass.

			EXAMPLE
			....................................
			Uize.module ({
				name:'MyNamespace.MyWidget',
				superclass:'Uize.Widget',
				required:'Uize.Web.Mixin',
				builder:function (_superclass) {
					return _superclass.subclass ({
						instanceMethods:{
							// ...
						},
						mixin:Uize.Web.Mixin
					});
				}
			});
			....................................

	Mixin as an Augmenter
		In the simplest possible implementation, a mixin could be implemented in the form of a simple function that acts as an augmenter.

		In the case of a class mixin, the mixin function would expect to receive a class as an argument and would call feature declaration methods on the class.

		EXAMPLE
		.................................
		UIze.module ({
			name:'MyNamespace.ClassMixin',
			builder:function () {
				return function (_class) {
					_class.declare ({
						instanceMethods:{
							// ...
						},
						stateProperties:{
							// ...
						}
					});
				};
			}
		});
		.................................

		USAGE
		.......................................
		Uize.module ({
			name:'MyClass',
			superclass:'Uize.Widget',
			required:'MyNamespace.ClassMixin',
			builder:function (_superclass) {
				return _superclass.subclass ({
					instanceMethods:{
						// ...
					},
					stateProperties:{
						// ...
					},
					mixin:'MyNamespace.ClassMixin'
				});
			}
		});
		.......................................

	How Features are Mixed in
		When the =MyClass.mixin= static method is called, the features of the classes that are specified are mixed into the class on which the =MyClass.mixin= method is called, in the order in which the mixin classes are specified.

		Copying Static Properties
			.

		Copying State Properties
			.

		Copying Properties of the Prototype
			.

		Copying in Constructors
			.

		Similar to Subclassing
			.

	Considerations for Implementing Your Own Mixins
		Avoid Namespace Conflicts for Privates
			.

		Be Careful With Private Static Properties
			.

		Host and Mixin Compatibility
			A mixin will likely have an expectation of the host in which it is mixed into.

			A mixin may expect to be mixed in to a specific class or subclass thereof, and may expect specific features to be present that may be used in the mixin's implementation.

			Non-standalone Mixins
				.

		Avoid Order Requirements Amongst Mixins
			.

	Open Questions
		Can Mixins be Standalone?
			For example, if two widget classes existed that implemented some part of a UI, would it be possible to create a new subclass and then mixin those two widget classes?

			An issue with mixing in standalone classes is that one can perform duplicate / redundant / wasted effort in copying in the guts of the classes to be mixed in. Ideally, if one create a new widget class and wanted to mix in the features of two other widget classes, only the modications made in those widget classes to the features inherited from the widget base class would be carried on the class into which the classes are being mixed in.

			So, if widget A, widget B, and widget C all subclassed =Uize.Widget=, then mixing in widget B and widget C into widget A would only mix in the feature deltas between =Uize.Widget= and widget B and =Uize.Widget= and widget C. In order to achieve this, the mixin logic would need to trace up the inheritance chain and find the common base class for all the classes involved.

			In reality, it may be more practical to require mixins to be implemented in a specific way - not as standalone classes but as class augmenters that have a specific expectation of the classes that they are to augment.

		Determining Where Features are Introduced
			With an implementation that treats a `mixin as an augmenter`, there is no way to programmatically determine that a feature that is mixed into a class actually originates from a mixin.

			To a tool like the DELVE tool, feature discovery will attribute mixed in methods to the classes in the inheritance chain into which they were mixed in - not the mixin modules in which they are implemented. The only way to overcome this would be to tag the functions with the modules in which they are implemented. This would involve somehow providing the mixin module also as a reference when declaring features, but it is unclear how this reference would be passed. Additionally, tagging as can be done with function references cannot be accomplished with instance properties, static properties, or state properties.

			All of this suggests that features should be declared in a more formalized manner and that classes on which features are declared should possibly maintain a registry of the features and where they were introduced and overridden.

The bind Instance Method
	Would provide a convenient way to bind the instance as a context to an instance method and arguments.

	INSTEAD OF...
	...........................................
	setTimeout (function () {m.hideMenu ()},0);
	...........................................

	USE...
	...................................
	setTimeout (m.bind ('hideMenu'),0);
	...................................

	IMPLEMENTATION
	......................................................................................................
	var _bind = Uize.nop.bind || function (_context) {
		var
			_args = [].slice.call (arguments,1),
			_function = this
		;
		return function () {
			return _function.apply (_context,_args.concat (Uize.copyList (arguments)));
		};
	};

	_class.prototype.bind = function (_method) {
		var
			_context = this,
			_args = arguments
		;
		_args = _args.length > 1 && [].slice.call (_args,1);
		if (typeof _function == 'string')
			_function = _context [_function]
		;
		return _args ? _bind.apply (_function,[_context].concat (_args)) : _bind.call (_function,_context);
	};
	......................................................................................................

	Impact
		Would add about 336 bytes to the size of the =Uize.Class= module.

		The main benefits would be a more elegant semantic for certain situations, and a tiny reduction in code size across the codebase. The savings would only balance out the added weight at large application scale, so the penalty is experienced mostly for smaller apps. Furthermore, most of the benefits would accrue to widget class modules in situations that will be avoided in future by more declarative binding logic. Finally, future versions of JavaScript will bring a =bind= method for all functions (already present in most modern browsers), and fat arrow syntax would also help in such situations.

		In conclusion, besides being kind of neat, there's negative value in adding this feature at this time.

Virtual Events
	Similar to the system of virtual DOM events.

	Virtual events can be parameterized. When multiple handlers are wired for the same virtual event, the setup for the event is shared amongst all handlers.

	Representing Conditions as Virtual Events
		The whenever Virtual Event
			EXAMPLES
			.....................................................................
			myWidget.wire (
				Uize.Class.virtualEvent ('whenever','theme => theme == "bottle"'),
				function () {
					// do stuff whenever condition is met
				}
			);

			myWidget.wire (
				Uize.Class.virtualEvent ('whenever',function (theme) {return theme == 'bottle'}),
				function () {
					// do stuff whenever condition is met
				}
			);

			myWidget.wire (
				'whenever("theme => theme == \'bottle\'")',
				function () {
					// do stuff whenever condition is met
				}
			);
			.....................................................................

	The next Virtual Event
		EXAMPLES
		..................................................
		myWidget.wire (
			'next("Click")',
			function () {
				// do something for only the very next click
			}
		);

		myWidget.onNext(
			'Click',
			function () {
				// do something for only the very next click
			}
		);
		..................................................

Properties Expressions
	SYNTAX
	......................................................................
	propertiesExpressionFUNC = Uize.propertiesExpression (expressionFUNC);
	......................................................................

	INSTEAD OF...
	.......................................................
	function (object) {
		return object.get ('width') * object.get ('height');
	}
	.......................................................

	USE...
	...................................................
	Uize.propertiesExpression (
		function (width,height) {return width * height};
	}
	...................................................

Derived Properties
	A derived property is a special type of state property whose value is derived from the values of other state properties of the same instance.

	EXAMPLE
	...........................................................................................................
	_class.stateProperties ({
		_allSelected:{
			name:'allSelected',
			derived:function (totalSelected,totalItems) {return totalSelected > 0 && totalSelected == totalItems}
		},
		_oneSelected:{
			name:'oneSelected',
			derived:function (totalSelected) {return totalSelected == 1}
		},
		_someSelected:{
			name:'someSelected',
			derived:function (totalSelected) {return totalSelected > 0}
		},
		_totalSelected:{
			name:'totalSelected',
			value:0
		},
		_totalItems:{
			name:'totalItems',
			value:0
		}
	});
	...........................................................................................................

	In the above example, the =allSelected=, =oneSelected=, and =someSelected= state properties are all derived properties. A state property is indicated as being a derived property by the presence of the =derived= property in the property profile. The =derived= property serves both to indicate that a state property is derived, as well to provide the deriver function that indicates from which other state properties the derived property is derived and how to calculate the derived value.

	Implementation Questions
		How Are Derived Properties Inherited
			Currently, profiles for state properties are inherited through cloning of the definition objects.

			If dynamically generated summary information is needed to improve the performance of derived properties, when will this summary information be generated for a class? And how is the information regenerated if it is invalidated by the subsequent declaration of more derived properties.

	Implementation Approaches
		Exploding Out the Properties Being Set
			With this approach, setting values for derived state properties is worked into the process of setting values for properties that affect derived properties, by exploding out the properties being set to include all affected derived properties.

			After setting values for the state properties that are being set explicitly, and before executing onChange handlers for any state properties whose values have changed, the declared state properties are scanned for derived state properties that may be affected by the properties being set explicitly. If any derived state properties *are* affected by any of the state properties whose values have changed, then values are computed for those derived properties and their values are set. This process is repeated to address state properties that are derived from derived properties whose values may have changed. The process is repeated until there are no longer any derived properties that are affected and that have not had new values computed.

			Advantages
				.

			Disadvantages
				.

		Single Level Derived Property Batching
			With this approach, values for all directly affected derived state properties are set in a batch set that occurs before =onChange= handlers are executed for the state properties being explicitly set.

		Using onChange Handler Mechanism
			With this approach, when a derived state property is declared, an onChange handler is registered with any property from which the derived property is derived.

			Advantages
				- uses the existing optimization built into the =onChange= handlers mechanism
				- matches the way values for derived state properties are currently being updated

			Disadvantages
				- involves a separate set for each derived state property whose value changes
				- requires management of =onChange= handlers and dealing with situations where state properties are re-declared

			Issues to Deal With
				Re-declaring a Non-derived State Property
					How does one deal with re-declaring a state property that affects a derived state property?

					Currently, everything gets blown away when re-declaring a state property. This means that the =onChange= handler that was added to the state property at the time of declaring the state property that is derived from it will get blown away, and the relationship of the derived property to the property from which it is derived will get blown away.

				Re-declaring a Derived State Property
					How does one deal with re-declaring a derived state property, where the new profile for the derived property defines a different relationship properties from which it is derived?

Property Bindings
	Provide a way in the =Uize.Class= base class to bind two state properties together, in order to keep their values synchronized.

	This would provide a more concise and lightweight way of binding properties than using an instance of the =Uize.Util.PropertyAdapter= class.

	INSTEAD OF...
	................................................................................
	Uize.Util.PropertyAdapter ({propertyA:[this,'prop'],propertyB:[slider,'prop']});
	................................................................................

	USE...
	............................................
	_this.bindProperty ('prop',[slider,'prop']);
	............................................

	BENEFITS
	- The =bindProperty= instance method would be a core capability of the =Uize.Class= base class, and all classes would get to benefit from this.
	- The =bindProperty= instance method should require a little less code to implement than the =Uize.Util.PropertyAdapter= class.

	NOTES
	- The =bindProperty= instance method would support an optional value adapter, just like the =Uize.Util.PropertyAdapter= class.
	- The =bindProperty= instance method would return an array of all the wirings created, so that they could be unwired later.
	- The =bindProperty= instance method should ideally be implemented by factoring some code out of the =Uize.Util.PropertyAdapter= class, and then the =Uize.Util.PropertyAdapter= class could be reduced in size and made to leverage the =bindProperty= implementation in the =Uize.Class= base class.

Copy Ability for State Properties
	Copy ability, for initial values of state properties that are arrays or objects.

	Have a property that can be specified in a state property's profile, which can be used to cause properties whose initial values are object types to be initialized by cloning the initial value rather than simply setting a reference to a shared object.

Handle Simple Type in Place of Constructor Properties
	Variation on constructor, where specifying a non-object for the properties has the effect of setting the value property.

	For example, if =Uize.Color= were to become a subclass of =Uize.Class=...

	EXAMPLE
	............................................
	Uize.Color ({value:'#ffffff'});  // old form
	Uize.Color ('#ffffff');          // new form
	............................................

	Or, in the case of an existing widget class that supports the value interface...

	EXAMPLE
	.................................................
	Uize.Widget.Bar.Slider ({value:50});  // old form
	Uize.Widget.Bar.Slider (50);          // old form
	.................................................

Improvements to Property Mechanism
	New Profile Features
		type
			Basic types...

			- string (coerce with value + '', implicit initial value is '')
			- boolean (coerce with !!value, implicit initial value is false)
			- number (coerce with +value, implicit initial value is 0)
			- date (coerce with new Date (value), implicit initial value is now)

			Extended types (ideas for other useful types)...

			- switch (valid string values for true value, implicit initial value is false)
			- integer (coerce with Math.round (value))

		validator
			Different types of validators...

			- function that can return true or false
			- regular expression
			- array of valid values

	- support for read-only properties (how would that work, exactly? Only settable through private name?)

	- problem: there's currently no way to use the set method to set the value for a state property to undefined. This is lame. The original reason for this had to do with the optimizing performance for the very first set during construction. This behavior is beneficial for state properties that have no initial value (what percentage of the overall is that?).

constructed Property
	- to indicate that the instance has been constructed
	- can be used by onChange handlers for state properties to conditionalize actions
	- particularly compelling to widgets, since being completely constructed is a good indicator child widgets added during construction exist and can be accessed
	- some classes may already be doing this with their own private properties

Originator of a Set
	The originator of a property set knows that the property is being set, so doesn't want to be informed of a change in the value?

	A way to provide an ID for the originator of a set? The basic ongoing problem is when multiple sources want to be able to change and also be informed of changes in a particular property. How does one make this more efficient and eliminate multiple redundant execution triggered by events?

