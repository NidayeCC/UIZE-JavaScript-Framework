<%@
	required (
		'Uize.String',
		'Uize.Json',
		'Uize.String.Lines'
	);
	input ({
		widgetNamespace:'string',
		superclass:'string',
		developers:'array',
		hasHtml:'boolean',
		hasCss:'boolean'
	});
%><%
	var
		_widgetNamespace = input.widgetNamespace,
		_widgetModuleName = _widgetNamespace + '.Widget',
		_widgetVisualSamplerModuleName = _widgetNamespace + '.VisualSampler',
		_hasHtml = input.hasHtml,
		_hasCss = input.hasCss,
		_htmlModuleName = _widgetNamespace + '.Html',
		_cssModuleName = _widgetNamespace + '.Css',
		_required = []
	;
	_hasHtml && _required.push (_htmlModuleName);
	_hasCss && _required.push (_cssModuleName);
%><%
	.headComment
%>/* Module Meta Data
	type: Class
	importance: 1
	codeCompleteness: 5
	docCompleteness: 5
*/

/*?
	Introduction
		The =<%= _widgetModuleName %>= module implements a widget class.

		*DEVELOPERS:* <%= Uize.String.hugJoin (input.developers || [],'`','`',', ') %>

		Visual Sampler
			Below is a visual sampler of the =<%= _widgetModuleName %>= class...

			.............<%= Uize.String.repeat ('.',_widgetVisualSamplerModuleName.length) %>
			<< widget >>

			widgetClass: <%= _widgetVisualSamplerModuleName %>
			.............<%= Uize.String.repeat ('.',_widgetVisualSamplerModuleName.length) %>
*/

Uize.module ({
	name:'<%= _widgetModuleName %>',
	superclass:'<%= input.superclass || 'Uize.Widget.V2' %>',
	required:<%= Uize.String.Lines.indent (Uize.Json.to (_required),1,'\t',false) %>,
	builder:function (_superclass) {
		'use strict';

		return _superclass.subclass ({
<%
		if (_hasHtml) {
%>			set:{
				html:<%= _htmlModuleName %>
			}<%
			if (_hasCss) { %>,


<% 		} else { %>
<%			}
		}
		if (_hasCss) {
%>			staticProperties:{
				cssModule:<%= _cssModuleName %>
			}
<%
		}
%>		});
	}
});

