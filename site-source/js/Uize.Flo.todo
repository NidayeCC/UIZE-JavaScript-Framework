Get it Ready for Release
	- finish up implementation
	- start using in a few places
	- finish documentation
	- implement unit tests (only browser and NodeJS because of setTimeout availability? Or create setTimeout patch for JScript in WSH?)

- unresolved issues
	- how do you know if an error has occured?
		- the callback is passed more than one argument and the first argument is a string or an error object
		- the single argument passed to the callback is an error object
		- an error is caught using a try...catch
			- how does flo know to wrap execution of a step in a try? (they can be costly)
				- a try should wrap the while loop in the next method, and then call the .throw method on the current flo

	how does flo know whether or not a step is asynchronous?
		- if the function doesn't declare more arguments than those passed to it (1 in the case of not function block, and 1 or more in the case of a function type block), then it is assumed to be synchronous, even if it returns undefined
		- if a reference to next is returned, then it is asynchronous
		- if a value other than next or undefined is returned, then it is synchronous

	- need to address the issue of method names for JS interpreters (such as JScript) that don't permit naked property names that are also reserved keywords
	- how to call a function, where the values of the arguments are determined as a result of asynchronous processes
	- how to pass arguments to a function block defined using the scope.function method
	- consider how ro support promises, if statements
		- if a statement is a function that returns a promise, or will these likely all have to be wrapped for binding to a context and passing arguments?
		- should flo statements be able to return promises, or should this just be wrapped when desired?
	- what is the impact of recursion?
		- is it possible to implement tail recursion optimization?

Optimization
	- for the synchronous execution call stack optimization, consider extending it to span across scopes, so that a nested scope structure can be executed through in a single loop

Improvements
	- consider supporting a yield statement (basically, pauses execution)
	- consider providing manual step through ability
	- literal result statements
		- statements that are not of type function are treated as simple assignment of the result
		- this is useful for switch...case blocks, where the case matches can be specified as string or number literals, rather than having to have functions for statements that are executed
	- errors
		- should all statements be wrapped in try...catch to catch and propagate errors in synchronous execution?
			- perhaps try catch should only wrap synchronous execution when there is a flo.try wrapper somewhere up the scope chain
			- this doesn't need to be around every statement execution, but can be implemented in next around contiguous blocks of synchronous statements
		- throwing errors up the call stack
			- construct a call stack?
			- how to pass the error to the catch handler? As the result?
	- add support for asynchronous expression / operation
		- operator groups
			- arithmetic: + - * / %
			- bitwise: << >> >>> ^ | &
			- conditional: < > == != === !=== <= >=
			- boolean: ! && ||
			- ternary: ? :
			- named: typeof instanceof in
			- misc: ,
		- left-to-right + PEMDAS
		- support short-circuiting
		- special handling for ternary
		- special handling for named binary operators
	- labels
		- consider implementing labeled statements with the ability to break to them
		- consider implementing labeled scopes, with the ability to break out of them
	- consider allowing the addition of custom properties to any block, with the ability to specify a block to break out of by a match expression that may match on any of those custom properties
	- syntactic sugar
		................
		flo
			.if (...)
				.then (...)
			.elseif (...)
				.then (...)
			.elseif (...)
				.then (...)
			.else (...)
			.endif ()
		................

		................
		flo
			.switch (...)
			.case (...,...)
			.case (...,...)
			.default (...)
		................

		................
		flo
			.try (...)
			.catch (...)
		................

		................
		flo.do (...)
			.while (...)
		................

		................
		flo.while (...)
			.do (...)
		................

	- features
		- can add extra provision for doing multiple async things in parallel (but might be out of purview)
		- syncTimeLimit
		- forceAsync (equivalent to syncTimeLimit of 0?)
		- parallel vs sequential
		- degrees of parallelism (limit on number of parallel processes)
		- parallel sequencing scheme? sequential clusters, or random clusters, or random individual, or etc.?
		- implement (a)sync iterator
			- as such, there doesn't need to be a dedicated async map. Instead, an async map should be an (a)sync iterator materialized / played out to produce an array through some method that applies generally to (a)sync iterators of all kinds
			- if a dedicate map method is provided, at least implement it upon a foundation of (a)sync iterators
			- this makes it possible to perform iterator math

Design Notes
	- don't conflate sync vs. async with serial vs. parallel processing
	- don't conflate async with function composition (ie. next chaining, piping)
	- don't conflate data utilities solution with sync vs. async solution
	- don't conflate callback pattern with asynchonous execution
	- flo does not make any presumptions about what problem asynchronous code is trying to solve
	- flo focues on solving a single, very specific dimension of the problem space surrounding asynchronous coding - control flow with mixed synchronous / asynchronous code with a sufficiently equivalent lexicon of control flow constructs as is traditionally found with synchronous execution

Implementation Fundamentals
	- providing a scope
		- receiving scope
			- every control flow structure is a function that can be called optionally as an instance method of a scope context
			- every control flow structure is a function that can be called most simply with no scope context, but with a continuation function reference as an argument
		- providing scope
			- when a control flow function is called as an instance method with a scope context, it uses a method on the scope context to create a scope instance for itsself that is parented to the scope context
			- when a control flow function is called without a scope context, it creates a new root level (unparented) scope context
			- when a control flow function calls other functions, it calls them as instance methods on the scope context created for itself

	- breaking
		- when any function called by a control flow function calls the break instance method, the scope chain is ascended and execution is aborted for all scopes up until and including the first scope that is found that is associated with a control flow function that supports breaking (loops and switch), provided that it is not encountered after a returnable scope (function)
		- when any function called by a control flow function calls the break instance method and there is no breakable scope up the scope chain, then an error is thrown

	- returning
		- when any function called by a control flow function calls the return instance method, the scope chain is ascended and execution is aborted for all scopes up until and including the first scope that is found that is associated with a control flow function that supports returning (functions), and the return value is returned for that scope
		- when any function called by a control flow function calls the return instance method and there is no returnable scope up the scope chain, then an error is thrown

	- if multiple functions are called in succession and they are done synchronously, then the call stack overflow with continuation function calls

Thoughts on Services and Flo
	......................
	fileService.getFiles (
		params,
		callback
	)
	......................

	if a callback is provided, then the asynchronous form - if implemented - is

	- asynchronous implementation
	- synchronous implementation

	require asynchronous
	prefer asynchronous
	require synchronous


	for every service method
		- async
		- sync

	- if no callback is provided and method has no synchronous implementation, then throw error
	- if callback is provided and synchronous is required and there is


	- if synchronous is required and no synchronous implementation is provided, then throw error
	- if synchronous is required and synchronous implementation is provided, then execute synchronous implementation and return result
	- if asynchronous is required and no asynchronous implementation is provided, then wrap in a timeout
	- if asynchronous is preferred and calback is provided, then callback is called synchronously


EXAMPLE
.........................
flo (
	'(',
		function () {},
		'*',
		'(',
			function () {},
			'+',
			function () {},
		')',
	')'
);
.........................


EXAMPLE
.........................
flo (
	'var foo = (',
		function () {},
		'*',
		'(',
			function () {},
			'+',
			function () {},
		')',
	')',
	'if','foo',
		'return',
	'call (',
		context,
		'myFunction',
		function () {},
		function () {},
		function () {}
	')'
)
.........................

Asynchronous for Loop
	..............................
	flo (
		'for',
		function () {}, // setup
		function () {}, // advance
		function () {}, // end test
		function () {}  // iterator
	);
	..............................

Asynchronous for...in Loop
	...
	flo (
		'for in',
		function () {}, // variable setup
		function () {}, // source setup
		function () {}  // iterator
	);
	...

Asynchronous Chain
	...
	flo (
		function () {},
		function () {},
		... ... ... ...
		function () {}
	);
	...

Asynchronous if
	...
	flo (
		'if',function () {
			// code to calculate condition expression
		},
		function () {
			// asynchronous conditional block
		}
	);
	...

Asynchronous if...else
	...
	flo (
		'if',function () {
			// code to calculate condition expression
		},
		function () {
			// asynchronous code for if case
		},
		'else',function () {
			// asynchronous code for else case
		}
	);
	...

Asynchronous if...else if
	...
	flo (
		'if',function () {
			// code to calculate condition expression
		},
		function () {
			// asynchronous code for if case
		},
		'else if',function () {
			// code to calculate condition expression
		},
		function () {
			// asynchronous code for else if case
		}
	);
	...

Asynchronous if...else if...else
	...
	flo (
		'if',function () {
			// code to calculate condition expression
		},
		function () {
			// asynchronous code for if case
		},
		'else if',function () {
			// code to calculate condition expression
		},
		function () {
			// asynchronous code for else if case
		},
		'else',function () {
			// asynchronous code for else case
		}
	);
	...

Asynchronous try...catch
	...
	flo (
		'try',function () {
			// code to try
		},
		'catch',function () {
			// catch code
		}
	);
	...

Asynchronous do...while
	...
	flo (
		'do',function () {
			// iteration code
		},
		'while',function () {
			// end condition test
		}
	);
	...

Asynchronous switch...case
	...
	flo (
		'switch',function () {
			// determine switch source
		},
		'case','case 1',function () {
			// code to handle "case 1"
		},
		'case','case 2',function () {
			// code to handle "case 2"
			this.break ();
		},
		... ... ... ...
		'case','case N',function () {
			// code to handle "case N"
		},
		'default',function () {
			// fallthrough
		}
	);
	...

