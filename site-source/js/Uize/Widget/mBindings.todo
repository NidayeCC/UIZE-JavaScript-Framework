This is a TO DO document for the =Uize.Widget.mBindings= mix-in module.

Implement New Binding Features
	Add Feature for Declaring Self, Child and DOM Event Wirings
		Provide a way to declare one or more self event, child event and/or DOM node event wirings for the widget, using a universal syntax.
		
		Verbose/Canonical Syntax
			The verbose/canonical syntax provides ability to wire multiple events for the DOM node or widget.
			
			EXAMPLE
			.................................................
			eventBindings:{
				menu:{ // DOM node
					click:function (_event) { }
					mouseover:function(_event) { }
				},
				'children.sliderG':{ // child widget
					'Changed.value':function (_event) { },
					Update:function(_event) { }
				},
				'~':{ // self
					'Changed.value':function (_event) { },
					Update:function(_event) { }
				}
			}
			.................................................
			
			NOTES
			- Top-level keys are the widget or node names (special '~' syntax for self)
			- Second-level keys are the event names
			- Values are functions executed in the scope of the widget, passing appropriate event object
			
		Semi-Verbose Syntax
			The semi-verbose syntax is most useful when only wanting to wire one event for the widget or DOM node.
			
			EXAMPLE
			.................................................
			eventBindings:{
				menu:[ // DOM node
					'click', function() { },
					'mouseover', function(_event) { }
				],
				'children.sliderG':{ // child widget
					'Changed.value', function (_event) { },
					'Update', function(_event) { }
				},
				'~':[ // self
					'Changed.value', function (_event) { },
					'Update', function(_event) { }
				]
			}
			.................................................
			
			NOTES:
			- Top-level keys are the widget or node names (special '~' syntax for self)
			- Array values are in pairs: even index is event name and odd index are functions executed in the scope of the widget, passing appropriate event object
			
		Short-hand Syntax
			The short-hand syntax mirrors the htmlBinding syntax providing a majority of the syntax in a string.
		
			SHORT-HAND SYNTAX EXAMPLE
			.................................................
			eventBindings:{
				'menu:click':function() { },
				'menu:mouseover':function(_event) { }
				'children.sliderG:Changed.value':function (_event) { },
				'children.sliderG:Update':function(_event) { },
				'~:Changed.value':function (_event) { },
				'~:Update':function(_event) { }
			}
			.................................................
			
			NOTES
			- Keys are colon-separate key-value pair, with widget or DOM node as the key and the event name as the value
			- Values are functions executed in the scope of the widget, passing appropriate event object
		
		Other Possible Syntaxes
			EXAMPLE
			................................
			eventBindings:[
				{
					source:'menu',
					event:'click',
					handler:function () {
					}
				},
				{
					source:'children.sliderG',
					event:'Changed.value',
					handler:function () {
					}
				},
				{
					source:'~',
					event:'Changed.value',
					handler:function () {
					}
				}
			]
			................................
	
			EXAMPLE
			..........................
			eventBindings:[
				[
					'menu',
					'click',
					function () {
					}
				],
				[
					'children.sliderG',
					'Changed.value',
					function () {
					}
				]
			]
			..........................
