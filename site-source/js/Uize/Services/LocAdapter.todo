This is a TO DO document for the =Uize.Services.LocAdapter= module.

Configuration of Language Support Per Brand
	Implement support for brand-specific configuration of supported languages.

	- if there is no explicit configuration of supported languages per brand, then use the base configuration of supported languages
	- for brand-specific strings, they are only placed in a language-specific canonical =.json= file if the brand supports the language
	- it should be possible to handle this all in the =export= method. If brand-specific strings don't exist for a language in the canonical =.json= file, then they won't appear in the exported translation jobs. Also, there won't be brand-specific resource files generated in the project's codebase from the =import= method for languages that aren't supported for the brand.

Repair on Export
	The export implementation should be updated to perform repair / synchronization for non-primary language files.

	Export should gather resources for each of the supported languages, and then serialize the single resources file per language. Upon gathering the resources for the primary language, the export process should determine which resource strings have changed for the primary language. For resource strings that have changed, the equivalent for each of the languages should be removed or blanked out. For any resource strings that have been removed, the equivalent for each of the languages should be removed.

	Once the resources have been updated for each language to reflect changes made in the resources for the primary language, the single resource file for each language can be serialized and written. By gathering the resources per language during the export process, this opens up the possibility of blanking out an individual resource string in the codebase if the translations is problematic, and this blanked out resource string will then appear as a new string that needs translation when a job is created for translation.

Export Translation Job
	There needs to be a method for exporting a translation job that will submit just the resource strings that need translation.

	Exporting a translation job would...

	- iterate through the supported languages
	- for each supported language, find all resource strings for which the value is blank but the value in the source language is not blank
	- create a data object that has all the untranslated strings, along with their source language version
	- serialize and write the data object

Import Translation Job
	There needs to be a method for importing the translated strings from a translation job, once an exported translation job has been submitted to a translator and translated.

	Importing a translatiob job would...

	- iterate through the supported languages
	- for each supported language, open the translation job file for the language
	- open the resouce strings file for the language
	- stitch the translated resource strings from the translation job file into the resource strings file
	- serialize the resource strings file and write it

