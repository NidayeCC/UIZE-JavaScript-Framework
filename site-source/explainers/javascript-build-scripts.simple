Introduction
	UIZE provides a system for developing build scripts that can be run either with [[http://nodejs.org/][NodeJS]] (all Node supported platforms) or WSH ([[http://en.wikipedia.org/wiki/Windows_Script_Host][Windows Script Host]]), for automating build tasks.

	What the Build Scripts Do
		UIZE comes with a versatile and extensible build system that is integrated into the dev server, allowing files to be built as part of a deploy process but also dynamically as needed during development.

		Among other things, the various UIZE build scripts...

		- *compress JavaScript modules* into smaller, obfuscated files using the UIZE's [[all-about-scrunching.html][Scruncher]]
		- *compile CSS modules* from =.csst= (CSS template) files that can use variables and functions
		- *compile JST (JavaScript template) modules* from =.js.jst= files in the module folder
		- *build packages* that include JavaScript modules, CSS modules, and HTML template modules
		- *copy unprocessed static files* (such as image assets) from a project's source path to a corresponding location under the project's built path
		- [[The Built-in UIZE Build Scripts][and more...]]

	Types of Build Scripts
		Build scripts can be divided into two main types...

		- *Build Scripts for Building Files* - these build scripts build the files for the production deployment of your project (such as the =Uize.Build.Files.JsModules= build script that builds all the JavaScript modules for your project)
		- *Development Tool Build Scripts* - these build scripts are tools for use during development (such as the =Uize.Build.Widget= build script that makes it easy to stub out all the modules for new V2 widgets)

	Where the Build Scripts are Located
		By convention, all of UIZE's built-in build scripts are located under the =Uize.Build= namespace.

		There is no requirement for build script modules to be located in any special place. If you write build scripts specific to yout own project, you might choose to follow your own convention. It wouldn't be unreasaonable to place them under a namespace like =MyNamespace.Build=. For example, all the build scripts specific to the UIZE Web site are located under the =UizeSite.Build= namespace - these are build scripts specific to the Web site, so they are not part of the UIZE core (you're not likely to use them in your own project, for example).

	Running the Build Scripts
		The build scripts can be run either with NodeJS (all Node supported platforms) or WSH (Windows Script Host).

		Once you have your project set up, you can run the build scripts by following the following steps for either NodeJS or WSH (Windows Script Host)...

		NodeJS
			To run the build scripts in NodeJS, perform the following steps...

			+. Open a bash (or equivalent) window.
			+. Set your project's root folder as the working directory (=cd= as necessary).
			+. Enter a command to execute, of the form...

			.......................................................................
			node [path_to_uize]build.js [build_module_name] [optional_build_params]
			.......................................................................

			EXAMPLE
			....................................................................
			node ../UIZE-JavaScript-Framework/build.js Uize.Build.All test=false
			....................................................................

			In the above example, we're running the =Uize.Build.All= build script, which builds the entire project, and opting to not run the unit tests afterwards by specifying the value =false= for the script's optional =test= parameter. Notice how we're specifying a relative path to the =build.js= file - here the project we are working on is a peer folder to the =UIZE-JavaScript-Framework= folder that contains the downloaded UIZE code.

		WSH
			To run the build scripts in WSH (Windows Script Host), perform the following steps...

			+. Open a bash (or equivalent) window.
			+. Set your project's root folder as the working directory (=cd= as necessary).
			+. Enter a command to execute, of the form...

			..........................................................................
			cscript [path_to_uize]build.js [build_module_name] [optional_build_params]
			..........................................................................

			EXAMPLE
			.......................................................................
			cscript ../UIZE-JavaScript-Framework/build.js Uize.Build.All test=false
			.......................................................................

			In the above example, we're running the =Uize.Build.All= build script, which builds the entire project, and opting to not run the unit tests afterwards by specifying the value =false= for the script's optional =test= parameter. Notice how we're specifying a relative path to the =build.js= file - here the project we are working on is a peer folder to the =UIZE-JavaScript-Framework= folder that contains the downloaded UIZE code.

			WSH AND ANTI-VIRUS SOFTWARE

			Depending on the configuration of the Windows machine you use, there may be anti-virus software installed that may be a bit overzealous in preventing any scripts from running using WSH. You may be prompted by such software to agree to let the script be run. Depending on the anti-virus software, you may be given the option to grant permission for a given build script for all future execution, without having to be prompted each time. If such permission is granted, such software may prompt again in future if the script's contents is modified (a hash of the contents may be stored by the software for the sake of detecting modifications).

	The Build Script Bootstrapping (build.js)
		When `running the build scripts`, you are actually getting either NodeJS or WSH to execute the =build.js= bootstrapping file.

		The code in the =build.js= file detects the JavaScript environment (NodeJS or WSH) and then sets up the module loader appropriately for the environment. Once this is done, it loads and executes the build script module specified as the parameter after the =build.js= script path. The build script module is executed by calling its =perform= static method and passing it a params object that contains the `UIZE config options` with any build parameters, that may be specified as name-value pairs after the build module name, merged in.

	### Project Setup
		Must Have the UIZE Config Options
			Be sure to copy the =uize-config.json= file along with the desired build scripts (for more info, see the section `UIZE Config Options`).

	### Features of the Build System
		Build Inversion
			.
			- IOC (Inversion of Control), pull vs push, starts with a request

		Builds Incrementally
			.

		Dependency-based Invalidation
			.

		Integrated into Dev Server
			.

		Built for Speed
			.

		Extremely Versatile / Configurable
			.

Build Script Log Files
	In order to keep you from being left completely in the dark as to what a build script does, the files that are processed by a build script are conveniently listed in one or more log files.

	Log File Naming
		For many build scripts, the name of the script's associated log file is simply the name of the build script module with the =.js= file extension replaced by a =.log= extension.

		OVERWRITE BEHAVIOR

		Every time a build script is run, the previous copies of its associated log files are overwritten. If you care about them (unlikely), you should make copies before running the script.

	Summary Info
		Some build scripts simply list the files that were built, while others may also list summary information for the build operation for each file along with the file listing.

		Basic Log Summaries
			Some build scripts simply list the files that were built, with basic information about the source file path, the target (generated / built) file path, a reason why the file was built (eg. =DIDN'T EXIST=, =WAS OUT OF DATE=, =ALWAYS BUILD=), and the duration for the build process.

			The snippet below shows some of the log file generated from running the `build JS modules` build script...

			LOG FILE SNIPPET
			.............................................................................................
			***** C:\~uize\UIZE-JavaScript-Framework\js\~source\Uize.Templates.Calendar.js.jst
				TARGET FILE: C:\~uize\UIZE-JavaScript-Framework\js\~source\Uize.Templates.Calendar.js
				BUILT (WAS OUT OF DATE), BUILD DURATION: 16ms

			***** C:\~uize\UIZE-JavaScript-Framework\js\~source\Uize.Templates.Collection.js.jst
				TARGET FILE: C:\~uize\UIZE-JavaScript-Framework\js\~source\Uize.Templates.Collection.js
				BUILT (DIDN'T EXIST), BUILD DURATION: 0ms

			C:\~uize\UIZE-JavaScript-Framework\js\~source\Uize.Templates.CollectionItem.js.jst
				TARGET FILE: C:\~uize\UIZE-JavaScript-Framework\js\~source\Uize.Templates.CollectionItem.js
				no action, file is current

			***** C:\~uize\UIZE-JavaScript-Framework\js\~source\Uize.Templates.HashTable.js.jst
				TARGET FILE: C:\~uize\UIZE-JavaScript-Framework\js\~source\Uize.Templates.HashTable.js
				BUILT (WAS OUT OF DATE), BUILD DURATION: 15ms
			.............................................................................................

			NOTES
			- For files that were built, the source URL is prefixed with a series of asterisks to make these entries stand out from the rest of the log file's contents. This makes it easier to scan the file with your eyes for build actions.
			- The summary info for each file that was built is indented under the source file path. For developers using text editors that support indent-based "folding", this makes it easy to collapse the log file down to just a list of source file paths, and then progressively expand folds to dig deeper into the summary info.

The Built-in UIZE Build Scripts
	UIZE comes bundled with a number of convenient, ready-to-go build scripts that will immediately be useful to your UIZE-enhanced project.

	Build Scripts for Building Files
		UIZE comes bundled with the following build scripts for building files...

		- =Uize.Build.Files.JsModules= - builds JavaScript modules (optionally compressed) from source JavaScript modules, JST JavaScript template (=.js.jst=) files, CSS template (=.csst=) files, and namespace folders
		- =Uize.Build.Files.JstDerivedPages= - builds pages that are derived from JST (=.[extension].jst=) files, provided that the source files are not =.js.jst= files
		- =Uize.Build.Files.UnprocessedFiles= - copies unprocessed static / asset files from the source path to corresponding locations under the built path

	Development Tool Build Scripts
		UIZE comes bundled with the following development tool build scripts...

		- =Uize.Build.AuditStrings=
		- =Uize.Build.FolderOrganizeJsModules=
		- =Uize.Build.ListJsModules=
		- =Uize.Build.NeatenJsFiles=
		- =Uize.Build.RunUnitTest=
		- =Uize.Build.RunUnitTests=
		- =Uize.Build.TraceDependencies=
		- =Uize.Build.UpdateCopyrightNotices=
		- =Uize.Build.WebServer=
		- =Uize.Build.Widget=

	###
		Build JS Modules
			The Build JS Modules build script (implemented in the file =WSH-Uize.Build.Files.JsModules.bat=) generates built JavaScript template modules from all the source JavaScript modules and JavaScript template (=.js.jst=) files that it finds in the modules folder.

			JavaScript modules found in the modules folder are scrunched, while JavaScript template (=.js.jst=) files are compiled to template modules and then scrunched. If you look through the modules folder in the download of the UIZE JavaScript Framework, you will notice a number of =.js.jst= files under the =UizeSite.Templates= namespace, many of which are HTML generators for widgets.

			NOTES
			- the core of the intelligence of the Build JS Modules build script can be found in the =Uize.Build.Files.JsModules= module
			- for more information on JavaScript template modules, consult the explainers [[javascript-templates.html][JavaScript Templates]] and [[javascript-modules.html][JavaScript Modules]]

		UIZE Site Build Simple Data Pages
			The UIZE Site Build Simple Data Pages build script (implemented in the file =WSH-UizeSite.Build.Files.SimpleDataPages.bat=) recurses through all folders of the UIZE Web site project, building pages from all the Simple Data (=.simpledata=) files that it finds.

			Simple Data is a data file format that is even more human readable than XML (how could this even be possible!?!?) and that uses indentation to indicate structure (so, kind of like Python, but for data). This build script finds all these files and builds pages from them, by processing the data in each file using an accompanying JavaScript Template (=.jst=) file.

			File Naming Scheme
				The filename for the JST file and the target (ie. built) file are determined by a simple file naming scheme that associates the two files with the Simple Data source file.

				According to this scheme, the filename for the JST file is the filename of the Simple Data file with the =.simpledata= file extension replaced with the =.jst= extension, and the filename of the built file is the filename of the Simple Data file with the =.simpledata= file extension stripped off. Consider the following example...

				FILE NAMING EXAMPLE
				...........................................
						 built file > credits.html
				JST template file > credits.html.jst
				 Simple Data file > credits.html.simpledata
				...........................................

				In the above example, the file =credits.html.simpledata= is the source Simple Data file, the file =credits.html.jst= is the JavaScript template that should be used for processing the data in the Simple Data file, and the file =credits.html= is the built file that contains the output of the template processing operation.

				Based on this file naming principle, the desired file extension for the built file is put before the =.simpledata= and =.jst= extensions. This means that the UIZE Site Build Simple Data Pages build script can build any type of text file from Simple Data files it encounters, and, in fact, the UIZE Web site project uses it to build a few of its HTML pages.

			NOTES
			- the core of the intelligence of the UIZE Site Build Simple Data Pages build script can be found in the =UizeSite.Build.Files.SimpleDataPages= module
			- the behavior of this build script is not affected by the values of the =buildFolderPath= and =sourceFolderName= UIZE config options
			- the summary info for this build script is output to the log file =UizeSite.Build.Files.SimpleDataPages.log=

		UIZE Site Build Simple Doc Pages
			The UIZE Site Build Simple Doc Pages build script (implemented in the file =WSH-UizeSite.Build.Files.SimpleDocPages.bat=) recurses through all folders of the UIZE Web site project, building pages from all the Simple Doc (=.simple=) files that it finds, as well as building HTML reference documentation pages from all JavaScript modules that it finds in the modules folder.

			Phases
				This build script is made up of two phases...

				PHASE 1: Build Pages From Simple Doc (.simple) Files
					An HTML page is generated for each Simple Doc (=.simple=) file.

					The build script recurses through all the folders, finding Simple Doc (=.simple=) files. For each file, it builds an HTML page from the Simple Doc document, using the =~SIMPLE-DOC-TEMPLATE.html.jst= template file that is contained inside the same folder as the Simple Doc file. The built HTML page is then output to the same folder as the Simple Doc file, where the filename of the built file is the filename of the Simple Doc file with the =.simple= file extension replaced with the =.html= extension.

					FILE NAMING EXAMPLE
					..............................................................................
					javascript-build-scripts.simple --> PRODUCES --> javascript-build-scripts.html
					..............................................................................

				PHASE 2: Build Pages From Simple Doc in JavaScript Modules
					An HTML reference documentation page is generated for each JavaScript module contained inside the modules folder.

					The build script iterates through all the JavaScript modules contained inside the modules folder (as specified by the =modulesFolder= build environment variable). For each file, it extracts all the Simple Doc comments, stitches all those comments together into a single Simple Doc document, and then builds an HTML page from that document, using the =~SIMPLE-DOC-TEMPLATE.html.jst= template file that is contained inside the =reference/= folder of the UIZE Web site project. The built HTML reference documentation page is then output to the =reference/= folder, where the filename of the built file is the filename of the JavaScript module with the =.js= file extension replaced with the =.html= extension.

					FILE NAMING EXAMPLE
					.............................................................
					js/Uize.Widget.js --> PRODUCES --> reference/Uize.Widget.html
					.............................................................

			For more information on Simple Doc - such as its rules on document structure, inline formatting, etc. - refer to the explainer [[javascript-documentation-system.html][JavaScript Documentation System]].

			NOTES
			- the behavior of this build script is not affected by the values of the =buildFolderPath= and =sourceFolderName= UIZE config options
			- the summary info for this build script is output to the log file =UizeSite.Build.Files.SimpleDocPages.log=

		UIZE Site Build Pages from Source Code
			The UIZE Site Build Pages from Source Code build script (implemented in the file =WSH-UizeSite.Build.Files.SourceCodePages.bat=) is intended primarily for the UIZE Web site, and builds HTML pages for viewing the source code of JavaScript modules and examples pages.

			JavaScript Module Source Code Pages
				A source code page is generated for every JavaScript module in the modules folder.

				The build script iterates through all the JavaScript modules contained inside the modules folder (as specified by the =modulesFolder= build environment variable), builds a source code page for each module using the JavaScript template =~SOURCE-CODE-TEMPLATE.html= contained inside the =reference/source-code= folder and places the built source code page inside that folder, where the source code page's filename is the name of the module with the file extension =.html= appended (eg. =Uize.Widget.html= for the =Uize.Widget= module).

			Example Source Code Pages
				A source code page is generated for every example page contained inside the =examples= folder.

				The build script iterates through all the example pages contained inside the =examples= folder, ignoring experimental examples prefixed with a "~" (tilde) character, builds a source code page for each example using the JavaScript template =~SOURCE-CODE-TEMPLATE.html= contained inside the =examples/source-code= folder and places the built source code page inside that folder, where the source code page's filename is the same as the example page's filename.

			NOTES
			- the summary info for this build script is output to the log file =UizeSite.Build.Files.SourceCodePages.log=

		Audit Strings
			The Audit Strings build script (implemented in the file =WSH-Uize.Build.AuditStrings.bat=) recurses through all folders of a project, harvests all the string literals from JavaScript files, filters them into different buckets depending on their likelihood of internationalizability, and produces a report with summaries for all the JavaScript files.

			The Audit Strings build script groups the literal strings it finds inside a JavaScript file into four buckets...

			NON-INTERNATIONALIZABLE STRINGS
				This category includes strings that are recognized by certain patterns as being non-internationalizable strings, including: DOM event names (eg. =click=), very JavaScript specific keywords (eg. =function=), HTML specific attribute names (eg. =href=), sufficiently distinctive HTML tag names (eg. =div=), file extensions (eg. =.gif=), strings that are only whitespace, strings that have no letter characters, hex formatted RGB color values (eg. =#ff0000=), module names (eg. =Uize.Widget.Bar=), any string starting with "Uize", underscore delimited identifiers (eg. =button_big_disabled=), Changed.[propertyName] events (eg. =Changed.value=), the Changed.&#42; event, sufficiently distinguishable URL paths (eg. =myfolder/mysubfolder/myfile.html=), camelCase identifiers (eg. =languageSortAscending=).

			LIKELY NON-INTERNATIONALIZABLE STRINGS
				This category includes strings with only one letter character (eg. =a=), and strings that look like short url snippets (eg. =myfolder/mysubfolder=).

			POSSIBLY INTERNATIONALIZABLE STRINGS
				This category includes strings that are not filtered out into either the `NON-INTERNATIONALIZABLE STRINGS`, `LIKELY NON-INTERNATIONALIZABLE STRINGS`, or `LIKELY INTERNATIONALIZABLE STRINGS` categories.

			LIKELY INTERNATIONALIZABLE STRINGS
				This category includes strings that are not filtered out into either the `NON-INTERNATIONALIZABLE STRINGS` or `LIKELY NON-INTERNATIONALIZABLE STRINGS` categories and that contain three adjacent, space separated words, where the middle word is all lowecase.

			Below is a snippet from the log file after the Audit Strings build script was run inside the =UIZE-JavaScript-Framework= folder of the UIZE Web site project...

			LOG FILE SNIPPET
			......................................................................................
			***** C:\~uize\UIZE-JavaScript-Framework\js\~source\Uize.Widget.TableSort.js
				TARGET FILE: C:\~uize\UIZE-JavaScript-Framework\js\~source\Uize.Widget.TableSort.js
				BUILT (ALWAYS BUILD), BUILD DURATION: 188ms
					NON-INTERNATIONALIZABLE STRINGS
						 --- 92,101,189
						TD --- 54
						TR --- 142,249,274
						Uize.Node --- 22
						Uize.Widget.TableSort --- 21
						headingLitClass --- 346
						headingOverClass --- 342
						languageSortAscending --- 350
						languageSortDescending --- 355
						click --- 292
						rowOverClass --- 360
						updateUi --- 339

					LIKELY NON-INTERNATIONALIZABLE STRINGS

					POSSIBLY INTERNATIONALIZABLE STRINGS
						TH --- 55
						tbody --- 50
						thead --- 272

					LIKELY INTERNATIONALIZABLE STRINGS
						Click to sort in ascending order --- 352
						Click to sort in descending order --- 357
			......................................................................................

			A few things to notice about the format...

			- the strings are listed in ASCIIbetically sorted order
			- to the right of each string is a listing of all the line numbers on which the string occurs

			THIS ONE'S SLOW

			Be warned: this build script can be quite slow to run, especially if you have a large project with many folders and many JavaScript files. It could take a few minutes to process all JavaScript files in a large project. You'll know when it's done running by the modified date of the associated log file, or you can watch the *WSCRIPT.EXE* process in the Windows Task Manager.

			NOTES
			- the core of the intelligence of the Audit Strings build script can be found in the =Uize.Build.AuditStrings= module
			- the summary info for this build script is output to the log file =Uize.Build.AuditStrings.log=

		Run Unit Tests (Scrunched)
			The Run Unit Tests (Scrunched) build script (implemented in the file =WSH-Uize.Build.RunUnitTests-scrunched.bat=) runs the unit test suite for the UIZE JavaScript Framework, using the scrunched versions of the JavaScript modules.

		Run Unit Tests (Source)
			The Run Unit Tests (Source) build script (implemented in the file =WSH-Uize.Build.RunUnitTests-source.bat=) runs the unit test suite for the UIZE JavaScript Framework, using the source versions of the JavaScript modules.

UIZE Config Options
	You may have to configure the build scripts to work in your project's environment by modifying the UIZE config options.

	The UIZE config options are set inside the =uize-config.json= file that sits at the root of your project. This file contains a JSON format object with properties for the various supported UIZE config options.

	The following UIZE config options are supported by the build scripts...

	builtPath
		A string, specifying the path (relative to the root folder of your project) for saving the files built by the build process.

	buildSequence
		A string array, specifying the names and order of execution of the build scripts that should be executed by the =Uize.Build.All= build script.

		See also the related =testSequence= config option.

	folderOrgNamespaces
		An array, specifying all the namespaces under which modules are organized by folders and subfolders, rather than as flat lists of files.

	isDev
		A boolean (or string value that is either ='true'= or ='false'=), specifying whether or not the build scripts should build files for dev mode.

		For example, when the =isDev= config option is set to =true=, JavaScript modules will be built without compressing them so as to facilitate easier debugging. Different build scripts can observe the =isDev= option in different ways, and some may not even be influenced by this option at all.

	memoryPath
		A string, specifying the path (relative to the root folder of your project) that will be used when producing URLs for in-memory, partial build results.

		Memory Path Mustn't Conflict With Real Path
			Files that are built and that are "saved" to folders under the memory path will not actually be saved to the file system.

			However, because the memory URLs must co-habit with real file system URLs for the sake of virtualization by abstracted file system gatekeeper methods, the path should not conflict with a real path that you wish to use in your project's folder structure. This is usually not a problem - just choose a path and reserve it for in-memory build products.

	modulesFolder
		A string, specifying the name of the folder in your project within which your JavaScript modules developed for UIZE will be located.

	scrunchedHeadComments
		An object that is a hash of JavaScript module header comments per namespace.

		When a JavaScript module is compressed by the Scruncher, all of its comments are removed (including any head comments that may have been present). If you wish to have the compressed code have a more lightweight / minimal head comment, then the comment string can be specified per namespace using this config option.

		Head Comment Substitution Tokens
			Head comments configured here may contain any of the following substitution tokens...

			- ={buildDate}= - the date when the module is built, formatted as ISO8601 date string
			- ={moduleName}= - the name of the module, so that the replacement head comment isn't totally generic

	servicesSetup
		A string, specifying the name of the module that should be loaded to perform the services setup when building your project.

		The services setup module can register any number of service to service adapter mappings for a project. For the build process, the adapter for the file builder service is registered.

	sourcePath
		A string, specifyiong the path (relative to the root folder of your project) that will be used for loading the source files needed for building the in-memory, temp, or built files.

	staleBefore
		A string, specifying the date before which built files are considered to be stale.

		If the last modified date for a built file is older than the specified =staleBefore= date, then the built file is considered stale and it as if the file wasn't ever built.

		Stale Before Now
			Specifying the special value ='now'= for this config option has the effect of forcing invalidation of all existing built files, thereby forcing a rebuild for any of them.

			This can be a useful last resort when a file is not being automatically rebuilt as expected and it is not clear why.

	staticFilePathMatcher
		A regular expression that will be used by the =Uize.Build.FileBuilders.UnprocessedFiles= file builder to copy unprocessed source files directly to the built folder.

		Because the unprocessed files file builder is typically registered as one of the earliest file builders (in order to improve build performance), one should take care to specify a regular expression that is guaranteed to not accidentally catch some files that you would like to have handled by dedicated file builders. Usually, the regular expression will catch files with certain file extensions, like =.gif=, =.jpg=, =.png=, etc.

	tempPath
		A string, specifying the path (relative to the root folder of your project) that will be used for saving temporary, partial build results.

		Unlike in-memory partil build results that are saved to the memory path (see the =memoryPath= config option), temp files are saved to the file system and are persistent across build processes.

	testSequence
		A string array, specifying execution statements for the test suites that should be executed by the =Uize.Build.All= build script.

		The test suites that are specified by this config option are executed by the =Uize.Build.All= build script after all the build scripts specified by the =buildSequence= config option are executed.

		Execution Statements
			Unlike the =buildSequence= config option, which is an array of names of build script modules that should be executed, the =testSequence= option is an array of execution statements, of the form...

			...................................................
			build.js MyNamespace.RunMyTestSuite foo=bar baz=qux
			...................................................

			Any number of name-value pairs can be specified for parameters that your test suite build modules accept.

	uizePath
		A string, specifying the path (relative to the root folder of your project) to the source files for the UIZE modules.

		Since the build scripts are run with your project's root folder as the working directory, and since your project will not contain the source code for the UIZE JavaScript Framework, this config option allows the build scripts to obtain the UIZE source files.

		This is important for two main reasons...

		- The build scripts rely heavily upon UIZE modules, so the =build.js= bootstrapping module needs to know how to locate and load them, relative to the root folder of your project, so that the build scripts can actually run successfully.
		- Since your project is likely to be using UIZE modules, the UIZE modules will be loading from the source location and stitched into the build result for your project. This allows you to maintain the UIZE source separately, outside of your own project, but have the needed parts built into a production ready version of your project.

	Deprecated Config Options
		The following UIZE config options were part of the old build system and have been deprecated with the adoption of the vastly improved build system.

		alwaysBuild
			A boolean, specifying whether the files that would be built by the build scripts should always be built, or if they should only be built if the source file has been modified since the last build.

			Most of the build scripts are coded to only rebuild files if the source file was updated since the previous build (ie. the modification date of the source file is later than that of the built file). In cases where you want to force the scripts to rebuild all the files they would normally build, you can set =alwaysBuild= to =true=.

			For some scripts, such as the `audit strings` script, the =alwaysBuild= build environment variable has no meaning.

		buildFolderPath
			A string, specifying the path - relative to the folder containing the build scripts - to a folder into which built files should be placed.

			When a value is specified for this optional build environment variable, built files will be populated into the specified build folder in a folder hierarchy that mirrors the folder hierarchy of the project. New folders are created inside the build folder as needed in order to house the built files. After the build scripts have run, the folder hierarchy inside the build folder will only match the folder hierarchy of the project if at least one file was built from every folder of the project, since folders are only created as needed for the built files. Of course, the build folder won't contain itself, since the build scripts don't consider the files inside the build folder as source material for building files (which is a good thing).

			For an explanation of how this variable relates to the =sourceFolderName= build environment variable, consult the section `buildFolderPath vs sourceFolderName`.

			NOTES
			- if a value is specified for the related =sourceFolderName= build environment variable, then the =buildFolderPath= variable has no effect

		doNotEnter
			An array or regular expression, specifying folders that should not be entered by the build scripts.

			For example, the regular expression value =/\\(css|images)$/= would prevent the build scripts from entering folders named =css= or =images=, and would be equivalent to the array value =['css','images']=. The benefit of a regular expression is that you can write matching rules to catch a host of different folders that you may wish the build scripts to avoid. As an example, the regular expression =/\\\.[^\\]*$/= would prevent the build scripts from entering folders that are prefixed with a "." (period character), which may indicate private or hidden system folders (eg. the Subversion source control system adds =.svn= folders to your project).

			When a build script encounters a folder that the =doNotEnter= build environment variable indicates should not be entered, then the build script will not consider the files in that folder and will also not recurse deeper into the folder's subfolders. Such "do not enter" folders are, therefore, effectively dead ends. In addition to folders specified by the =doNotEnter= variable, the build scripts will also not enter any folder specified by the =buildFolderPath= build environment variable, so the build folder is implicitly a "do not enter" folder.

		dryRun
			A boolean, specifying whether or not the build scripts should save built files.

			By default, the build scripts will save the built files to the location determined by the values of the =buildFolderPath= and =sourceFolderName= UIZE config options. In cases where you just want to see what build actions are taken by a particular build script without having any files be modified, you can set =dryRun= to =true=.

			When a build script is doing a dry run, it will still build the files and do everything that it normally would, except that it won't write the built files to the target location. A summary of all that would be done is output to a build script's associated log file(s), just as would be the case if you weren't doing a dry run. Doing a dry run and viewing the log files might be a good way to check that the target file paths are correct before doing a genuine build that would write files to the system.

		sourceFolderName
			A string, specifying the folder name for folders that contain source (ie. unscrunched) JavaScript files.

			When a value is specified for this optional build environment variable, scrunched JavaScript files will be populated into the parent folder of the folder containing the source JavaScript files, and the name of the source folder must match the value of the =sourceFolderName= variable. For example, if the value of this variable is ='~source'=, then the JavaScript file with the path =js/~source/Uize.Color.js= will be scrunched because it is inside a folder named =~source=, and the scrunched file will be placed in the parent folder and have the path =js/Uize.Color.js=.

			For an explanation of how this variable relates to the =buildFolderPath= build environment variable, consult the section `buildFolderPath vs sourceFolderName`.

			NOTES
			- if a value is specified for this variable, then the =buildFolderPath= build environment variable has no effect

		buildFolderPath vs sourceFolderName
			For certain build scripts - such as the `audit strings` build script - the location for unscrunched and scrunched JavaScript files needs to be known.

			You can take one of two approaches in your project...

			The buildFolderPath Approach
				You can locate your source JavaScript throughout the folder structure of your site and then have the scrunched JavaScript be output to a separate build folder that contains a mirror of your site's folder hierarchy.

				This is the =buildFolderPath= approach, and with this approach you would have a folder structure something like...

				....................................................
				js/Uize.Color.js
				js/Uize.Comm.Ajax.js             <-- source files
				js/Uize.Comm.Iframe.js
				js/Uize.Comm.Iframe.Upload.js
				... ... ...
				bld/js/Uize.Color.js
				bld/js/Uize.Comm.Ajax.js         <-- scrunched files
				bld/js/Uize.Comm.Iframe.js
				bld/js/Uize.Comm.Iframe.Upload.js
				... ... ...
				....................................................

				Here, =buildFolderPath= is set to ='bld'=, while =sourceFolderName= is set to =''= (an empty string).

			The sourceFolderName Approach
				You can locate your source JavaScript throughout the folder structure of your site in a specially named folder, where the scrunched version of JavaScript files in such folders are output to the parent folder.

				This is the =sourceFolderName= approach, and with this approach you would have a folder structure something like...

				....................................................
				js/~source/Uize.Color.js
				js/~source/Uize.Comm.Ajax.js     <-- source files
				js/~source/Uize.Comm.Iframe.js
				js/~source/Uize.Comm.Iframe.Upload.js
				... ... ...
				js/Uize.Color.js
				js/Uize.Comm.Ajax.js             <-- scrunched files
				js/Uize.Comm.Iframe.js
				js/Uize.Comm.Iframe.Upload.js
				... ... ...
				....................................................

				Here, =sourceFolderName= is set to ='~source'=, while =buildFolderPath= is set to =''= (an empty string).

Writing Your Own Build Scripts
	There's no saying that you need to be limited to the collection of convenient build scripts that are included with the UIZE JavaScript Framework download.

	Adapting the Existing Build Scripts
		Any build script provided as part of the UIZE JavaScript Framework download that is useful to your Web sites or projects can be adapted to suit your needs.

		Not all of the provided build scripts will necessarily be useful to you, of course, since some of them are intended primarily for the UIZE Web site. But, if a build script is potentially useful but not perfectly suited to the folder structure of your own projects, just change it. And some of the build scripts are already configurable with `UIZE config options`.

	Roll Your Own
		If you can't adapt an existing build script to meet your needs, or hack it to meet slightly different needs, then you may just want to create your own specialized build script from scratch.

		More creative applications of build scripts include things such as using a data set to drive the generation of hundreds (or thousands, even) of static files, such as HTML pages or XML files. The [[http://www.tomkidding.com][tomkidding.com]] Web site uses a build script, for example, to generate hundreds of HTML pages for paintings, drawings, sketches, graphic art, photography, photomontages, etc. from an artworks database. A benefit of building static HTML files is that there is no dependency on a server side database technology, and there are performance benefits that improve scalability under traffic load, since Web servers are well optimized to deliver static HTML pages to the client, and caching systems throughout the Internet are more likely to persist the static pages.

	Structure of a Build Script
		.

		EXAMPLE
		........................................................................................
		........................................................................................

	Build-compatible UIZE Modules
		In addition to using the build script specific modules under the =Uize.Build= namespace, build scripts can also use any of the other UIZE modules that are build-compatible.

		Compatible Modules
			UIZE modules that *ARE* build-compatible include...

			- =Uize.Array= (and all submodules)
			- =Uize.Build= (and all submodules)
			- =Uize.Class= (and all submodules)
			- =Uize.Color= (and all submodules)
			- =Uize.Curve= (and all submodules)
			- =Uize.Data= (and all submodules)
			- =Uize.Date= (and all submodules)
			- =Uize.Doc= (and all submodules)
			- =Uize.Fade= (and all submodules, but *only for non-time based fades*)
			- =Uize.Json=
			- =Uize.Service= (and all submodules)
			- =Uize.Services= (and all submodules, but only build-compatible service adapters)
			- =Uize.String= (and all submodules)
			- =Uize.Template= (and all submodules)
			- =Uize.Templates= (and all submodules)
			- =Uize.Test= (and all submodules)
			- =Uize.Url=
			- =Uize.Util= (and all submodules, except =Uize.Util.Cycle=)
			- =Uize.Xml=

		Incompatible Modules
			UIZE modules that are *NOT* compatible with Windows Script Host are those modules that assume a browser context, and include such modules as...

			- =Uize.Comm= (and all submodules)
			- =Uize.Cookie=
			- =Uize.Fx= (and all submodules)
			- =Uize.Node= (and all submodules)
			- =Uize.Tooltip=
			- =Uize.Util.Cycle=
			- =Uize.Widget= (and all submodules)

	Start Hacking
		Needless to say, there are any number of ways to utilize build scripts. All it takes is a little imagination. Crack open any one of the bundled build scripts to get an idea of where to start.

